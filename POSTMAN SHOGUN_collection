{
	"info": {
		"_postman_id": "655f8fb0-620b-4936-bfc0-71a4d7425bc6",
		"name": "POSTMAN SHOGUN-Academia Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34121521",
		"_collection_link": "https://angelica-7706.postman.co/workspace/SUITS-TREINAMENTO~6037fc49-bcb9-4d89-9c7d-5a205eb0ce71/collection/34121521-655f8fb0-620b-4936-bfc0-71a4d7425bc6?action=share&source=collection_link&creator=34121521"
	},
	"item": [
		{
			"name": "üõëAuth",
			"item": [
				{
					"name": "loginApi",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (jsonData.token) {\r",
											"    pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
											"    console.log(\"Token salvo com sucesso:\", jsonData.token);\r",
											"} else {\r",
											"    console.warn(\"Token n√£o encontrado na resposta.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{mailAdmin}}\",\r\n  \"password\": \"{{passwordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "valida√ß√£o de aut. de msg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"valida√ß√£o de autentica√ß√£o de mensagem\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.include(\"autentica√ß√£o autorizada com sucesso\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{mailAdmin}}\",\r\n  \"password\": \"{{passwordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "valida√ß√£o token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Verifica se o token est√° presente na resposta\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Token est√° presente na resposta\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{mailAdmin}}\",\r\n  \"password\": \"{{passwordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "token salvo no ambiente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o token j√° est√° salvo no ambiente\r",
											"pm.test(\"Token j√° est√° salvo no ambiente\", function () {\r",
											"    let savedToken = pm.environment.get(\"tokenAdmin\");\r",
											"    pm.expect(savedToken).to.be.a(\"string\");\r",
											"    pm.expect(savedToken.length).to.be.greaterThan(0);\r",
											"    console.log(\"Token j√° salvo:\", savedToken);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{mailAdmin}}\",\r\n  \"password\": \"{{passwordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "-se status da resp √© 400, 401 ou 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste 1: Verifica se o status √© 400, 401 ou 404\r",
											"pm.test(\"Status da resposta √© 400, 401 ou 404\", function () {\r",
											"    pm.expect([400, 401, 404]).to.include(pm.response.code);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "-mail exixte msg de erro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\" Campo 'mail' cont√©m mensagem de erro esperada\", function () {\r",
											"    pm.expect(responseJson.mail).to.equal(\"O campo e-mail √© obrigat√≥rio.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "-password existe msg de erro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\" Campo 'password' cont√©m mensagem de erro\", function () {\r",
											"    pm.expect(responseJson.password).to.be.a(\"string\");\r",
											"    pm.expect(responseJson.password.length).to.be.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "validateToken",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}validateToken",
									"host": [
										"{{url}}validateToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "contem propriedade valida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Resposta cont√©m propriedade 'valid'\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}validateToken",
									"host": [
										"{{url}}validateToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "token valido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Token √© v√°lido\", function () {\r",
											"    pm.expect(jsonData.valid).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}validateToken",
									"host": [
										"{{url}}validateToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "campo √© true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"// 2Ô∏è‚É£ Verifica se o campo 'valid' existe e √© true\r",
											"pm.test(\"‚úÖ Campo 'valid' existe e √© true\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"valid\");\r",
											"    pm.expect(responseJson.valid).to.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenAdmin}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}validateToken",
									"host": [
										"{{url}}validateToken"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Esta se√ß√£o documenta os endpoints de autentica√ß√£o respons√°veis pelo **login de usu√°rios** üë§üîë e pela **verifica√ß√£o de tokens** ‚úÖüîí. Eles s√£o essenciais para o **controle de acesso** üö™ e a **seguran√ßa da aplica√ß√£o** üõ°Ô∏è.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "üõë Users",
			"item": [
				{
					"name": "CreatUser 23245",
					"item": [
						{
							"name": "Nome",
							"item": [
								{
									"name": "status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Todos campos validos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"if (jsonData.token) {\r",
													"    pm.environment.set(\"tokenUsers\", jsonData.token);\r",
													"    console.log(\"Token salvo com sucesso:\", jsonData.token);\r",
													"} else {\r",
													"    console.warn(\"Token n√£o encontrado na resposta.\");\r",
													"}\r",
													"\r",
													"pm.test(\"Login bem-sucedido\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(201);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "nome valido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Nome completo est√° correto\", function () {\r",
													"    pm.expect(jsonData.user.fullName).to.equal(\"Vin√≠cius Rodrigues\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "contem campos obrigatorios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User object contains required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.user).to.be.an('object').that.includes.keys('_id', 'fullName', 'mail', 'accessProfile', 'cpf', 'status', 'audit', '__v');\r",
													"    \r",
													"    responseData.user.audit.forEach(auditItem => {\r",
													"        pm.expect(auditItem).to.be.an('object').that.includes.keys('registeredBy', 'registrationDate', 'registrationNumber', '_id');\r",
													"        pm.expect(auditItem.registeredBy).to.be.an('object').that.includes.keys('userId', 'userLogin');\r",
													"    });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "verifica se fuuname existe",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo fullName existe na resposta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.user).to.have.property(\"fullName\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha ao enviar sem nome",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro ao cadastrar com nome vazio\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
													"\r",
													"    const mensagens = response.error;\r",
													"    pm.expect(Array.isArray(mensagens)).to.be.true;\r",
													"\r",
													"    const contemNome = mensagens.some(msg => msg.toLowerCase().includes(\"nome\"));\r",
													"    pm.expect(contemNome, \"Mensagem deve mencionar 'nome'\").to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \" \",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha ao enviar nome com caract. especiais",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro ao cadastrar com nome contendo caracteres especiais\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
													"\r",
													"    const mensagens = response.error;\r",
													"    const contemNome = mensagens.some(msg => msg.toLowerCase().includes(\"nome\"));\r",
													"    pm.expect(contemNome).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Angelica @ Schiavon\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "E-mail",
							"item": [
								{
									"name": "status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "cadastro de mail com dominio valido Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Cadastro com e-mail padr√£o v√°lido\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "mail contem @",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json();\r",
													"\r",
													"pm.test(\"mail cont√©m @\", function () {\r",
													"    pm.expect(responseData.user.mail.includes(\"@\")).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "mail existe",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json();\r",
													"pm.test(\"mail existe\", function () {\r",
													"    pm.expect(responseData.user.mail).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha se mail nao tem@",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Email inv√°lido - sem @\", function () {\r",
													"    pm.expect(\"usuarioemail.com\").to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"angelicagmail.com\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha se tem espa√ßo no mail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Email inv√°lido - espa√ßo no e-mail\", function () {\r",
													"    pm.expect(\"usuario email@email.com\").to.not.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"angelica @gmail.com\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "senha",
							"item": [
								{
									"name": "minimo 8 ncaracteres",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "minimo 8 ncaracteres Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Senha √© v√°lida\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    const senha = requestBody.password;\r",
													"\r",
													"    // Regras de valida√ß√£o\r",
													"    const temMinimo8 = senha.length >= 8;\r",
													"    const temLetra = /[A-Za-z]/.test(senha);\r",
													"    const temNumero = /[0-9]/.test(senha);\r",
													"    const temMaiuscula = /[A-Z]/.test(senha);\r",
													"    const temEspecial = /[!@#$%^&*(),.?\":{}|<>]/.test(senha);\r",
													"    const semEspaco = !/\\s/.test(senha);\r",
													"\r",
													"    // Valida√ß√£o final\r",
													"    pm.expect(temMinimo8 && temLetra && temNumero && temMaiuscula && temEspecial && semEspaco).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{FullNameUsers}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "senha contem letra",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Senha cont√©m letras\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    pm.expect(requestBody.password).to.match(/[A-Za-z]/);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "senha contem numeros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Senha cont√©m n√∫meros\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    pm.expect(requestBody.password).to.match(/[0-9]/);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Falha quando a senha n√£o atende aos crit√©rios de seguran√ßa",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro quando a senha n√£o atende aos crit√©rios de seguran√ßa\", function () {\r",
													"    const senha = JSON.parse(pm.request.body.raw).password;\r",
													"    const regexSenha = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*]).{8,12}$/;\r",
													"\r",
													"    pm.expect(senha).to.not.match(regexSenha);\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBbb\",\r\n  \"mail\": \"testeeo@empresua.com\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"40755305256\",\r\n  \"password\": \"SenhaAAAAA\",\r\n  \"confirmPassword\": \"SenhAAAAA\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha com senha vazia",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"senha vazia\", function () {\r",
													"    const senha = JSON.parse(pm.request.body.raw).password;\r",
													"    const regexSenha = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*]).{8,12}$/;\r",
													"\r",
													"    pm.expect(senha).to.not.match(regexSenha);\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBbb\",\r\n  \"mail\": \"testeeo@empresua.com\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"40755305256\",\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"SenhAAAAA\"\r\n}\r\n/*a api rejeita o maximo permitido */",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha com senha com espa√ßo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro: senha com espa√ßos\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"    const password = body.password;\r",
													"\r",
													"    pm.expect(password, \"Campo 'password' deve existir\").to.not.be.undefined;\r",
													"    pm.expect(password).to.include(\" \");\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"angelica\",\r\n  \"mail\": \"testeeo@empresuaaaa.com\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"40755305663\",\r\n  \"password\": \"od#15dKod#15 dKV3CjA\",\r\n  \"confirmPassword\": \"od#15dKod#15 dKV3CjA\"\r\n}\r\n/*a api rejeita o maximo permitido */",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "confirma√ß√£o de Senha",
							"item": [
								{
									"name": "status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "senha e confirma√ß√£o sao iguais",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Password e ConfirmPassword s√£o iguais\", function () {\r",
													"    let requestBody = {};\r",
													"    try {\r",
													"        requestBody = JSON.parse(pm.request.body.raw);\r",
													"    } catch (e) {\r",
													"        console.warn(\"Erro ao ler o corpo da requisi√ß√£o:\", e);\r",
													"    }\r",
													"\r",
													"    pm.expect(requestBody.password, \"Campo 'password' ausente\").to.not.be.undefined;\r",
													"    pm.expect(requestBody.confirmPassword, \"Campo 'confirmPassword' ausente\").to.not.be.undefined;\r",
													"    pm.expect(requestBody.password).to.eql(requestBody.confirmPassword);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "enviado corretamente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo 'password' enviado corretamente\", function () {\r",
													"    let requestBody = {};\r",
													"    try {\r",
													"        requestBody = JSON.parse(pm.request.body.raw);\r",
													"    } catch (e) {\r",
													"        console.warn(\"Erro ao ler o corpo da requisi√ß√£o:\", e);\r",
													"    }\r",
													"\r",
													"    const password = requestBody.password;\r",
													"\r",
													"    pm.expect(password, \"Campo 'password' ausente\").to.not.be.undefined;\r",
													"    pm.expect(password, \"Campo 'password' est√° vazio\").to.not.be.empty;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "garante que nao haja msg de erro retornada.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nenhuma mensagem de erro √© retornada\", function () {\r",
													"    const responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody.error, \"Campo 'error' n√£o deve existir\").to.be.undefined;\r",
													"    pm.expect(responseBody.message, \"Campo 'message' n√£o deve conter erro\").to.satisfy(function (msg) {\r",
													"        return msg === undefined || msg === null || msg === \"\";\r",
													"    });\r",
													"    pm.expect(responseBody.errors, \"Campo 'errors' n√£o deve conter mensagens\").to.satisfy(function (errors) {\r",
													"        return errors === undefined || (Array.isArray(errors) && errors.length === 0);\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Falha quando password e confirmPassword s√£o diferentes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro quando senha e confirma√ß√£o s√£o diferentes\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"    pm.expect(body.password).to.not.eql(body.confirmPassword);\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBbb\",\r\n  \"mail\": \"testeeoempresua.com\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"40755305256\",\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"Senha@1234\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha com campo vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro quando apenas confirmPassword est√° vazio\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"    pm.expect(body.confirmPassword).to.eql(\"\");\r",
													"    pm.expect(body.password).to.not.eql(\"\");\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    const responseJson = pm.response.json();\r",
													"    const errors = responseJson.errors || responseJson.message || responseJson.error;\r",
													"\r",
													"    const found = Array.isArray(errors)\r",
													"        ? errors.some(msg => msg.toLowerCase().includes(\"confirma\"))\r",
													"        : String(errors).toLowerCase().includes(\"confirma\");\r",
													"\r",
													"    pm.expect(found).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"AAAAAAAAAAAbb\",\r\n  \"mail\": \"testee@oempresua.com\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"40755305256\",\r\n  \"password\": \"Senha@1234\",\r\n  \"confirmPassword\": \"\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CPF",
							"item": [
								{
									"name": "status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "se tem 11 digitos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CPF tem 11 d√≠gitos\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    const cleanCpf = requestBody.cpf.replace(/[^\\d]/g, \"\");\r",
													"    pm.expect(cleanCpf.length).to.eql(11);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "contem apenas numeros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CPF cont√©m apenas n√∫meros\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    const cleanCpf = requestBody.cpf.replace(/[^\\d]/g, \"\");\r",
													"    pm.expect(cleanCpf).to.match(/^\\d+$/);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "√± e sequencia repetida",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CPF n√£o √© sequ√™ncia repetida\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    const cleanCpf = requestBody.cpf.replace(/[^\\d]/g, \"\");\r",
													"    const invalidCpfs = [\r",
													"        \"00000000000\", \"11111111111\", \"22222222222\", \"33333333333\",\r",
													"        \"44444444444\", \"55555555555\", \"66666666666\", \"77777777777\",\r",
													"        \"88888888888\", \"99999999999\"\r",
													"    ];\r",
													"    pm.expect(invalidCpfs).to.not.include(cleanCpf);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{CpfUsers}}\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha com menos de 11 digitos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro: CPF com menos de 11 d√≠gitos\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"    const cpf = body.cpf;\r",
													"\r",
													"    pm.expect(cpf, \"Campo 'cpf' deve existir\").to.not.be.undefined;\r",
													"    pm.expect(cpf.length, \"CPF deve ter 11 d√≠gitos\").to.be.below(11);\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"4910287156\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha com caracteres nao numericos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro: CPF com caracteres inv√°lidos\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"    const cpf = body.cpf;\r",
													"\r",
													"    pm.expect(cpf, \"Campo 'cpf' deve existir\").to.not.be.undefined;\r",
													"    pm.expect(cpf).to.not.match(/^\\d{11}$/); // s√≥ n√∫meros\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"{{fullName}}\",\r\n    \"mail\": \"{{MailUsers}}\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"491028715as\",\r\n    \"password\": \"{{PasswordUsers}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Departament perfil de acesso",
							"item": [
								{
									"name": "status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "perfil presente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Perfil de acesso est√° presente\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    pm.expect(requestBody.accessProfile).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "√© uma string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Perfil de acesso √© uma string\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    pm.expect(requestBody.accessProfile).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Campos obrigatorio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Perfil de acesso √© v√°lido\", function () {\r",
													"    const requestBody = JSON.parse(pm.request.body.raw);\r",
													"    const validProfiles = [\"ADMIN\", \"USER\", \"MANAGER\", \"SUPPORT\"];\r",
													"    pm.expect(validProfiles).to.include(requestBody.accessProfile);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha campo vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro: accessProfile vazio\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"    const accessProfile = body.accessProfile;\r",
													"\r",
													"    pm.expect(accessProfile, \"Campo 'accessProfile' deve existir\").to.not.be.undefined;\r",
													"    pm.expect(accessProfile).to.eql(\"\");\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "falha campo com numeros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// üéØ Gera√ß√£o de primeiro nome aleat√≥rio\r",
													"function generateFirstName() {\r",
													"    const firstNames = [\r",
													"        \"Alice\", \"Miguel\", \"Sophia\", \"Arthur\", \"Helena\", \"Bernardo\", \"Valentina\", \"Heitor\", \"Laura\", \"Davi\",\r",
													"        \"Lorenzo\", \"Manuela\", \"Th√©o\", \"Luiza\", \"Pedro\", \"Giovanna\", \"Gabriel\", \"Julia\", \"Enzo\", \"Mariana\",\r",
													"        \"Caio\", \"Beatriz\", \"Matheus\", \"Clara\", \"Rafael\", \"Cec√≠lia\", \"Guilherme\", \"Esther\", \"Samuel\", \"Elo√°\",\r",
													"        \"Henrique\", \"L√≠via\", \"Gustavo\", \"Lara\", \"Felipe\", \"Let√≠cia\", \"Jo√£o\", \"Rebeca\", \"Daniel\", \"Nicole\",\r",
													"        \"Vin√≠cius\", \"Mait√™\", \"Eduardo\", \"Yasmin\", \"Leonardo\", \"Isadora\", \"Bruno\", \"Melissa\", \"Andr√©\", \"Agatha\"\r",
													"    ];\r",
													"    return firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"}\r",
													"\r",
													"// üéØ Gera√ß√£o de sobrenome aleat√≥rio\r",
													"function generateLastName() {\r",
													"    const lastNames = [\r",
													"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Almeida\", \"Lima\", \"Ferreira\", \"Pereira\", \"Costa\",\r",
													"        \"Martins\", \"Fernandes\", \"Barbosa\", \"Moura\", \"Nascimento\", \"Moreira\", \"Teixeira\", \"Monteiro\", \"Batista\", \"Dias\",\r",
													"        \"Campos\", \"Cardoso\", \"Freitas\", \"Andrade\", \"Machado\", \"Vieira\", \"Rocha\", \"Ramos\", \"Pinto\", \"Castro\"\r",
													"    ];\r",
													"    return lastNames[Math.floor(Math.random() * lastNames.length)];\r",
													"}\r",
													"\r",
													"// üë§ Nome completo\r",
													"const firstName = generateFirstName();\r",
													"const lastName = generateLastName();\r",
													"const fullName = `${firstName} ${lastName}`;\r",
													"pm.environment.set(\"FirstName\", firstName);\r",
													"pm.environment.set(\"LastName\", lastName);\r",
													"pm.environment.set(\"FullNameUsers\", fullName);\r",
													"\r",
													"// üìß E-mail baseado no nome e sobrenome\r",
													"function normalizeText(text) {\r",
													"    return text\r",
													"        .toLowerCase()\r",
													"        .normalize(\"NFD\")\r",
													"        .replace(/[\\u0300-\\u036f]/g, \"\") // remove acentos\r",
													"        .replace(/\\s/g, \"\"); // remove espa√ßos\r",
													"}\r",
													"\r",
													"const normalizedFirst = normalizeText(firstName);\r",
													"const normalizedLast = normalizeText(lastName);\r",
													"const randomSuffix = Math.floor(Math.random() * 1000); // opcional para evitar duplicidade\r",
													"const email = `${normalizedFirst}.${normalizedLast}${randomSuffix}@suits.com.br`;\r",
													"\r",
													"pm.environment.set(\"MailUsers\", email);\r",
													"\r",
													"// üìå CPF √∫nico\r",
													"function generateCpf() {\r",
													"    let cpf;\r",
													"    let existingCpfsRaw = pm.environment.get(\"existingCpfs\");\r",
													"    let existingCpfs = existingCpfsRaw ? existingCpfsRaw.split(\",\") : [];\r",
													"\r",
													"    do {\r",
													"        cpf = \"\";\r",
													"        for (let i = 0; i < 11; i++) {\r",
													"            cpf += Math.floor(Math.random() * 10);\r",
													"        }\r",
													"    } while (existingCpfs.includes(cpf));\r",
													"\r",
													"    existingCpfs.push(cpf);\r",
													"    pm.environment.set(\"existingCpfs\", existingCpfs.join(\",\"));\r",
													"    return cpf;\r",
													"}\r",
													"pm.environment.set(\"CpfUsers\", generateCpf());\r",
													"\r",
													"// üîê Senha v√°lida\r",
													"function generatePassword() {\r",
													"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
													"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
													"    const digits = \"0123456789\";\r",
													"    const specials = \"@#$%\";\r",
													"    const allChars = uppercase + lowercase + digits + specials;\r",
													"\r",
													"    function isValid(password) {\r",
													"        return (\r",
													"            /[A-Z]/.test(password) &&\r",
													"            /[a-z]/.test(password) &&\r",
													"            /\\d/.test(password) &&\r",
													"            /[@#$%]/.test(password) &&\r",
													"            password.length >= 8 &&\r",
													"            password.length <= 12 &&\r",
													"            !/^[0-9@#$%]/.test(password)\r",
													"        );\r",
													"    }\r",
													"\r",
													"    let password = \"\";\r",
													"    let tries = 0;\r",
													"    do {\r",
													"        tries++;\r",
													"        password = \"\";\r",
													"        password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
													"        password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
													"        password += digits[Math.floor(Math.random() * digits.length)];\r",
													"        password += specials[Math.floor(Math.random() * specials.length)];\r",
													"\r",
													"        const totalLength = Math.floor(Math.random() * (12 - 8 + 1)) + 8;\r",
													"        const remainingChars = Array.from({ length: totalLength - 4 }, () =>\r",
													"            allChars[Math.floor(Math.random() * allChars.length)]\r",
													"        ).join(\"\");\r",
													"\r",
													"        password = (password + remainingChars)\r",
													"            .split('')\r",
													"            .sort(() => Math.random() - 0.5)\r",
													"            .join('');\r",
													"    } while (!isValid(password) && tries < 10);\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"const password = generatePassword();\r",
													"pm.environment.set(\"PasswordUsers\", password);\r",
													"pm.environment.set(\"confirmPassword\", password);\r",
													"\r",
													"// ‚úÖ Logs para verifica√ß√£o\r",
													"console.log(\"Nome gerado:\", fullName);\r",
													"console.log(\"E-mail gerado:\", email);\r",
													"console.log(\"CPF gerado:\", pm.environment.get(\"CpfUsers\"));\r",
													"console.log(\"Senha gerada:\", password);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro: accessProfile com valor inv√°lido\", function () {\r",
													"    const body = JSON.parse(pm.request.body.raw);\r",
													"    const accessProfile = body.accessProfile;\r",
													"\r",
													"    const perfisValidos = [\"ADMIN\", \"USER\", \"MANAGER\"]; // ajuste conforme sua regra\r",
													"    pm.expect(perfisValidos).to.not.include(accessProfile);\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{tokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenAdmin}}",
												"description": "{{tokenAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fullName\": \"{{FullNameUsers}}\",\r\n  \"mail\": \"{{MailUsers}}\",\r\n  \"accessProfile\": \"ADMIN1\",\r\n  \"cpf\": \"{{CpfUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\",\r\n  \"confirmPassword\": \"{{confirmPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}user/",
											"host": [
												"{{url}}user"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "LoginApi",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"let jsonData = pm.response.json();\r",
											"let token = jsonData.token; \r",
											"\r",
											"pm.environment.set(\"tokenUsers\", token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{MailUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\"\r\n}\r\n/*NAO RETORNA A MENSAGEM DE USUARIO J√Å CADASTRAD*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "mensagem de sucerro correta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mensagem de sucesso est√° correta\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody({\r",
											"        mensagem: \"Ol√° Carlos Costa, autentica√ß√£o com sucesso!\"\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{MailUsers}}\",\r\n  \"password\": \"{{PasswordUsers}}\"\r\n}\r\n/*NAO RETORNA A MENSAGEM DE USUARIO J√Å CADASTRADO*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha campo senha vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro: senha vazia\", function () {\r",
											"    const body = JSON.parse(pm.request.body.raw);\r",
											"    const senha = body.password;\r",
											"\r",
											"    pm.expect(senha).to.eql(\"\");\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{MailUsers}}\",\r\n  \"password\": \"\"\r\n}\r\n/*NAO RETORNA A MENSAGEM DE USUARIO J√Å CADASTRADO AP√ìS ENVIAR SEND NOVAMENTE.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha campo email ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro: campo 'mail' vazio\", function () {\r",
											"    const requestBody = JSON.parse(pm.request.body.raw);\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    // Verifica que o campo 'mail' est√° presente e vazio\r",
											"    pm.expect(requestBody).to.have.property(\"mail\");\r",
											"    pm.expect(requestBody.mail).to.eql(\"\");\r",
											"\r",
											"    // Verifica que a resposta tem status 400\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"    // Verifica que a mensagem de erro est√° correta\r",
											"    pm.expect(responseBody).to.have.property(\"mail\");\r",
											"    pm.expect(responseBody.mail).to.eql(\"O campo e-mail √© obrigat√≥rio.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"\",\r\n  \"password\": \"{{PasswordUsers}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserList",
					"item": [
						{
							"name": "‚úî status code 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Pega o primeiro _id da lista de usu√°rios\r",
											"let jsonData = pm.response.json();\r",
											"let userId = jsonData[0]._id;\r",
											"\r",
											"// Salva como vari√°vel global ou de ambiente\r",
											"pm.environment.set(\"selectedUserId\", userId);\r",
											"\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}user/",
									"host": [
										"{{url}}user"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "‚úî lista retornada corretamente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Lista de usu√°rios retornada corretamente\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.length).to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}user/",
									"host": [
										"{{url}}user"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "response contem lista",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta cont√©m lista de usu√°rios\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}user/",
									"host": [
										"{{url}}user"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "userCount",
					"item": [
						{
							"name": "‚úî Status code √© 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}user/count",
									"host": [
										"{{url}}user"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "‚úî Contagem de usu√°rios √© n√∫mero e maior que zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contagem de usu√°rios √© v√°lida\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Se o retorno for direto o n√∫mero\r",
											"    if (typeof jsonData === \"number\") {\r",
											"        pm.expect(jsonData).to.be.a(\"number\");\r",
											"        pm.expect(jsonData).to.be.above(0);\r",
											"    }\r",
											"\r",
											"    // Se vier no formato { count: 10 }\r",
											"    if (jsonData.count !== undefined) {\r",
											"        pm.expect(jsonData.count).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.count).to.be.above(0);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}user/count",
									"host": [
										"{{url}}user"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserByID",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "response √© valido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta √© um JSON v√°lido\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Objeto possui os campos esperados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Objeto possui campos esperados\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"_id\");\r",
											"    pm.expect(jsonData).to.have.property(\"fullName\");\r",
											"    pm.expect(jsonData).to.have.property(\"mail\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fullName √© uma string v√°lida",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"fullName √© uma string v√°lida\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.fullName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.fullName.length).to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha id inavlido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro ao enviar ID inv√°lido\", function () {\r",
											"  pm.response.to.have.status(500); // ou 422, dependendo da API\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}user/523568",
									"host": [
										"{{url}}user"
									],
									"path": [
										"523568"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upDateByID",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const nomes = [\"ana\", \"joao\", \"maria\", \"lucas\", \"beatriz\", \"carlos\", \"aline\", \"pedro\", \"juliana\", \"rafael\"];\r",
											"const sobrenomes = [\"silva\", \"souza\", \"oliveira\", \"pereira\", \"lima\", \"costa\", \"moura\", \"alves\", \"rocha\", \"barbosa\"];\r",
											"const dominios = [\"@gmail.com\", \"@outlook.com\", \"@suitts.com.br\", \"@example.com\"];\r",
											"\r",
											"function gerarEmail() {\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"    const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"    const numero = Math.floor(Math.random() * 999);\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"    return `${nome}.${sobrenome}${numero}${Date.now()}${dominio}`;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"emailAleatorio\", gerarEmail());\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{emailAleatorio}}\"\r\n}\r\n//atualizei dados depois se der sende novamente para atualuzar a mensagem de que os dados ja foram atualizados nao existe",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "‚úî Full Name presente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Campo fullName est√° presente\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.updatedUser).to.have.property(\"fullName\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{emailAleatorio}}\"\r\n}\r\n//atualizei dados depois se der sende novamente para atualuzar a mensagem de que os dados ja foram atualizados nao existe",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "‚úî ullName tem formato v√°lido (letras e espa√ßo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"fullName tem formato v√°lido\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.updatedUser.fullName).to.match(/^[A-Za-z√Ä-√ø'\\- ]+$/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{emailAleatorio}}\"\r\n}\r\n//atualizei dados depois se der sende novamente para atualuzar a mensagem de que os dados ja foram atualizados nao existe",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando fullname ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro quando 'fullName' est√° ausente\", function () {\r",
											"  pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"\",\r\n  \"mail\": \"test@teest.com\"\r\n}\r\n//atualizei dados depois se der sende novamente para atualuzar a mensagem de que os dados ja foram atualizados nao existe",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando mail esta ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro quando 'fullName' n√£o √© string\", function () {\r",
											"  pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"12345\",\r\n  \"mail\": \"\"\r\n}\r\n//atualizei dados depois se der sende novamente para atualuzar a mensagem de que os dados ja foram atualizados nao existe",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "üìçupDatePasswordID",
					"item": [
						{
							"name": "‚úî status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function generateValidPassword() {\r",
											"    const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const lower = \"abcdefghijklmnopqrstuvwxyz\";\r",
											"    const numbers = \"0123456789\";\r",
											"    const special = \"@#$%\";\r",
											"    const all = upper + lower + numbers + special;\r",
											"\r",
											"    while (true) {\r",
											"        let characters = [];\r",
											"\r",
											"        characters.push(upper[Math.floor(Math.random() * upper.length)]);\r",
											"        characters.push(lower[Math.floor(Math.random() * lower.length)]);\r",
											"        characters.push(numbers[Math.floor(Math.random() * numbers.length)]);\r",
											"        characters.push(special[Math.floor(Math.random() * special.length)]);\r",
											"\r",
											"        const totalLength = Math.floor(Math.random() * 5) + 8;\r",
											"\r",
											"        while (characters.length < totalLength) {\r",
											"            characters.push(all[Math.floor(Math.random() * all.length)]);\r",
											"        }\r",
											"\r",
											"        let password = characters.sort(() => 0.5 - Math.random()).join('');\r",
											"\r",
											"        const isValid = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%])[A-Za-z\\d@#$%]{8,12}$/.test(password);\r",
											"        if (isValid) return password;\r",
											"    }\r",
											"}\r",
											"\r",
											"const senha = generateValidPassword().trim();\r",
											"pm.environment.set(\"passwordCreate\", senha);\r",
											"pm.environment.set(\"confirmPasswordCreate\", senha);\r",
											"\r",
											"// Debug\r",
											"console.log(\"Senha gerada:\", senha);\r",
											"console.log(\"Tamanho senha:\", senha.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{passwordCreate}}\",\r\n    \"confirmPassword\": \"{{confirmPasswordCreate}}\"\r\n}\r\n// quando atualizo a primeira vez ok mas seu dou send novamente a mensagem de senha ja atualizada nao retorna.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/password/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"password",
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "‚úî Resposta √© um JSON v√°lido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta √© um JSON v√°lido\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function generateValidPassword() {\r",
											"    const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const lower = \"abcdefghijklmnopqrstuvwxyz\";\r",
											"    const numbers = \"0123456789\";\r",
											"    const special = \"@#$%\";\r",
											"    const all = upper + lower + numbers + special;\r",
											"\r",
											"    while (true) {\r",
											"        let characters = [];\r",
											"\r",
											"        characters.push(upper[Math.floor(Math.random() * upper.length)]);\r",
											"        characters.push(lower[Math.floor(Math.random() * lower.length)]);\r",
											"        characters.push(numbers[Math.floor(Math.random() * numbers.length)]);\r",
											"        characters.push(special[Math.floor(Math.random() * special.length)]);\r",
											"\r",
											"        const totalLength = Math.floor(Math.random() * 5) + 8;\r",
											"\r",
											"        while (characters.length < totalLength) {\r",
											"            characters.push(all[Math.floor(Math.random() * all.length)]);\r",
											"        }\r",
											"\r",
											"        let password = characters.sort(() => 0.5 - Math.random()).join('');\r",
											"\r",
											"        const isValid = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%])[A-Za-z\\d@#$%]{8,12}$/.test(password);\r",
											"        if (isValid) return password;\r",
											"    }\r",
											"}\r",
											"\r",
											"const senha = generateValidPassword().trim();\r",
											"pm.environment.set(\"passwordCreate\", senha);\r",
											"pm.environment.set(\"confirmPasswordCreate\", senha);\r",
											"\r",
											"// Debug\r",
											"console.log(\"Senha gerada:\", senha);\r",
											"console.log(\"Tamanho senha:\", senha.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{passwordCreate}}\",\r\n    \"confirmPassword\": \"{{confirmPasswordCreate}}\"\r\n}\r\n// quando atualizo a primeira vez ok mas seu dou send novamente a mensagem de senha ja atualizada nao retorna.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/password/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"password",
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "response body presente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mensagem de sucesso est√° presente\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"msg\");\r",
											"    pm.expect(jsonData.msg).to.eql(\"Senha atualizada com sucesso!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function generateValidPassword() {\r",
											"    const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const lower = \"abcdefghijklmnopqrstuvwxyz\";\r",
											"    const numbers = \"0123456789\";\r",
											"    const special = \"@#$%\";\r",
											"    const all = upper + lower + numbers + special;\r",
											"\r",
											"    while (true) {\r",
											"        let characters = [];\r",
											"\r",
											"        characters.push(upper[Math.floor(Math.random() * upper.length)]);\r",
											"        characters.push(lower[Math.floor(Math.random() * lower.length)]);\r",
											"        characters.push(numbers[Math.floor(Math.random() * numbers.length)]);\r",
											"        characters.push(special[Math.floor(Math.random() * special.length)]);\r",
											"\r",
											"        const totalLength = Math.floor(Math.random() * 5) + 8;\r",
											"\r",
											"        while (characters.length < totalLength) {\r",
											"            characters.push(all[Math.floor(Math.random() * all.length)]);\r",
											"        }\r",
											"\r",
											"        let password = characters.sort(() => 0.5 - Math.random()).join('');\r",
											"\r",
											"        const isValid = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%])[A-Za-z\\d@#$%]{8,12}$/.test(password);\r",
											"        if (isValid) return password;\r",
											"    }\r",
											"}\r",
											"\r",
											"const senha = generateValidPassword().trim();\r",
											"pm.environment.set(\"passwordCreate\", senha);\r",
											"pm.environment.set(\"confirmPasswordCreate\", senha);\r",
											"\r",
											"// Debug\r",
											"console.log(\"Senha gerada:\", senha);\r",
											"console.log(\"Tamanho senha:\", senha.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{passwordCreate}}\",\r\n    \"confirmPassword\": \"{{confirmPasswordCreate}}\"\r\n}\r\n// quando atualizo a primeira vez ok mas seu dou send novamente a mensagem de senha ja atualizada nao retorna.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/password/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"password",
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando password esta ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro quando 'password' est√° ausente\", function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function generateValidPassword() {\r",
											"    const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const lower = \"abcdefghijklmnopqrstuvwxyz\";\r",
											"    const numbers = \"0123456789\";\r",
											"    const special = \"@#$%\";\r",
											"    const all = upper + lower + numbers + special;\r",
											"\r",
											"    while (true) {\r",
											"        let characters = [];\r",
											"\r",
											"        characters.push(upper[Math.floor(Math.random() * upper.length)]);\r",
											"        characters.push(lower[Math.floor(Math.random() * lower.length)]);\r",
											"        characters.push(numbers[Math.floor(Math.random() * numbers.length)]);\r",
											"        characters.push(special[Math.floor(Math.random() * special.length)]);\r",
											"\r",
											"        const totalLength = Math.floor(Math.random() * 5) + 8;\r",
											"\r",
											"        while (characters.length < totalLength) {\r",
											"            characters.push(all[Math.floor(Math.random() * all.length)]);\r",
											"        }\r",
											"\r",
											"        let password = characters.sort(() => 0.5 - Math.random()).join('');\r",
											"\r",
											"        const isValid = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%])[A-Za-z\\d@#$%]{8,12}$/.test(password);\r",
											"        if (isValid) return password;\r",
											"    }\r",
											"}\r",
											"\r",
											"const senha = generateValidPassword().trim();\r",
											"pm.environment.set(\"passwordCreate\", senha);\r",
											"pm.environment.set(\"confirmPasswordCreate\", senha);\r",
											"\r",
											"// Debug\r",
											"console.log(\"Senha gerada:\", senha);\r",
											"console.log(\"Tamanho senha:\", senha.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"\",\r\n    \"confirmPassword\": \"{{confirmPasswordCreate}}\"\r\n}\r\n// quando atualizo a primeira vez ok mas seu dou send novamente a mensagem de senha ja atualizada nao retorna.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/password/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"password",
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha üéà400 quando repete o teste",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro 400: Senha j√° foi atualizada\", function () {\r",
											"    pm.response.to.have.status(400); // Verifica o status HTTP\r",
											"\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody.msg).to.eql(\"Senha j√° foi atualizada\"); // Verifica a mensagem exata\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function generateValidPassword() {\r",
											"    const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const lower = \"abcdefghijklmnopqrstuvwxyz\";\r",
											"    const numbers = \"0123456789\";\r",
											"    const special = \"@#$%\";\r",
											"    const all = upper + lower + numbers + special;\r",
											"\r",
											"    while (true) {\r",
											"        let characters = [];\r",
											"\r",
											"        characters.push(upper[Math.floor(Math.random() * upper.length)]);\r",
											"        characters.push(lower[Math.floor(Math.random() * lower.length)]);\r",
											"        characters.push(numbers[Math.floor(Math.random() * numbers.length)]);\r",
											"        characters.push(special[Math.floor(Math.random() * special.length)]);\r",
											"\r",
											"        const totalLength = Math.floor(Math.random() * 5) + 8;\r",
											"\r",
											"        while (characters.length < totalLength) {\r",
											"            characters.push(all[Math.floor(Math.random() * all.length)]);\r",
											"        }\r",
											"\r",
											"        let password = characters.sort(() => 0.5 - Math.random()).join('');\r",
											"\r",
											"        const isValid = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%])[A-Za-z\\d@#$%]{8,12}$/.test(password);\r",
											"        if (isValid) return password;\r",
											"    }\r",
											"}\r",
											"\r",
											"const senha = generateValidPassword().trim();\r",
											"pm.environment.set(\"passwordCreate\", senha);\r",
											"pm.environment.set(\"confirmPasswordCreate\", senha);\r",
											"\r",
											"// Debug\r",
											"console.log(\"Senha gerada:\", senha);\r",
											"console.log(\"Tamanho senha:\", senha.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{passwordCreate}}\",\r\n    \"confirmPassword\": \"{{confirmPasswordCreate}}\"\r\n}\r\n// quando atualizo a primeira vez ok mas seu dou send novamente a mensagem de senha ja atualizada nao retorna.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user/password/{{selectedUserId}}",
									"host": [
										"{{url}}user"
									],
									"path": [
										"password",
										"{{selectedUserId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{tokenAdmin}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "üõëCompany",
			"item": [
				{
					"name": "CreateCompany",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"status 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "üìçn√£o aceita menos de 10 n√∫meros e retorna mensagem gen√©rica",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Campo address.number rejeita menos de 10 n√∫meros e retorna mensagem de erro gen√©rica\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    // Verifica se a API retorna erro (ex: 400 Bad Request)\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"\r",
											"    // Verifica se a mensagem de erro existe\r",
											"    pm.expect(responseData.message).to.be.a('string').that.is.not.empty;\r",
											"\r",
											"    // Verifica se a mensagem de erro √© gen√©rica e n√£o menciona o m√≠nimo de d√≠gitos\r",
											"    pm.expect(responseData.message).to.include(\"apenas n√∫meros\");\r",
											"    pm.expect(responseData.message).to.not.include(\"m√≠nimo de 10 d√≠gitos\");\r",
											"});\r",
											"/*\r",
											"VERIFICA \r",
											"codigo 400--API REJEITA NUMEROS CURTOS\r",
											"\r",
											"mensagem inclui \"apenas numeros-- A VALIDA√á√ÉO ESTA ATIVA\r",
											"\r",
											"mensagem nao menciona m√≠nimo de 10 digitos--mensagem de erro incompleta e confusa\"\r",
											"pega o id criado para atualizar compahiapo id\r",
											"*/let response = pm.response.json();\r",
											"\r",
											"if (response.newCompany) {\r",
											"    // Salva o ID da empresa criada\r",
											"    pm.environment.set(\"companyId\", response.newCompany._id);\r",
											"\r",
											"    // Se precisar do endere√ßo tamb√©m\r",
											"    if (response.newCompany.address && response.newCompany.address.length > 0) {\r",
											"        pm.environment.set(\"addressId\", response.newCompany.address[0]._id);\r",
											"    }\r",
											"\r",
											"    console.log(\"Company criada:\", response.newCompany.corporateName, \"ID:\", response.newCompany._id);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "objeto tem os campos esperados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"objeto tem os campos esperados\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newCompany).to.exist.and.to.be.an('object');\r",
											"    \r",
											"    const newCompany = responseData.newCompany;\r",
											"    pm.expect(newCompany).to.have.all.keys('corporateName', 'registerCompany', 'responsibleContact', 'mail', 'telephone', 'serviceDescription', 'matriz', 'status', 'address', 'audit', '_id', '__v');\r",
											"\r",
											"    pm.expect(newCompany.address).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(newCompany.audit).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "mail formato valido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"O e-mail est√° em um formato v√°lido\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newCompany).to.exist;\r",
											"    pm.expect(responseData.newCompany.mail).to.exist.and.to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "telefone formato valido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"O telefone deve estar em um formato v√°lido\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newCompany.telephone).to.exist;\r",
											"    pm.expect(responseData.newCompany.telephone).to.match(/^\\+?[1-9]\\d{1,14}$/); // Valid phone number format\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha Formato inv√°lido de e-mail.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ==================== TESTE 1 - E-mail inv√°lido ====================\r",
											"pm.test(\"Deve falhar com 400 para e-mail inv√°lido\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem de erro deve mencionar e-mail\", function () {\r",
											"    let body;\r",
											"    try { body = pm.response.json(); } catch (e) { body = pm.response.text(); }\r",
											"    let stringBody = typeof body === \"object\" ? JSON.stringify(body).toLowerCase() : body.toLowerCase();\r",
											"    pm.expect(stringBody).to.include(\"mail\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"angelicamailcom\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha Telefone com tamanho incorreto.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ==================== TESTE 2 - Telefone inv√°lido ====================\r",
											"pm.test(\"Deve falhar com 400 para telefone inv√°lido\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"12345\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha Campo obrigat√≥rio faltando",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Falha quando corporateName n√£o √© enviado\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"    pm.expect(pm.response.json().message).to.include(\"corporateName\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha N√∫mero do endere√ßo fora da regra (n√£o tem 10 caracteres).",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Falha quando o n√∫mero do endere√ßo tem menos de 10 caracteres\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"    const mensagens = jsonData.error;\r",
											"\r",
											"    pm.expect(mensagens.join(\" \").toLowerCase()).to.include(\"n√∫mero\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"56358\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha cnpj invalido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCNPJ() {\r",
											"    let cnpj = \"\";\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return cnpj + \"0001\" + Math.floor(10 + Math.random() * 90);\r",
											"}\r",
											"\r",
											"function gerarEmail(nome) {\r",
											"    const dominios = [\"empresa.com\", \"negocio.com.br\", \"servicos.net\"];\r",
											"    const dominio = dominios[Math.floor(Math.random() * dominios.length)];\r",
											"\r",
											"    // Normaliza nome (remove acentos e caracteres especiais)\r",
											"    const nomeLimpo = nome\r",
											"        .normalize(\"NFD\")                   // quebra acento\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")    // remove acentos\r",
											"        .replace(/[^a-zA-Z0-9]/g, \"\")       // remove caracteres especiais e espa√ßos\r",
											"        .toLowerCase();\r",
											"\r",
											"    return nomeLimpo + Math.floor(Math.random() * 1000) + \"@\" + dominio;\r",
											"}\r",
											"\r",
											"\r",
											"function gerarTelefone() {\r",
											"    const ddi = \"55\";\r",
											"    const ddd = [\"11\", \"21\", \"31\", \"41\", \"61\"];\r",
											"    const dddEscolhido = ddd[Math.floor(Math.random() * ddd.length)];\r",
											"    const numero = Math.floor(900000000 + Math.random() * 100000000).toString();\r",
											"    return ddi + dddEscolhido + numero;\r",
											"}\r",
											"\r",
											"function gerarNumeroEndereco() {\r",
											"    let numero = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        numero += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"    return numero;\r",
											"}\r",
											"\r",
											"function gerarNomesESobrenomes() {\r",
											"    const primeirosNomes = [\r",
											"        \"Ana\", \"Bruno\", \"Carlos\", \"Daniela\", \"Eduardo\", \"Fernanda\", \"Gabriel\", \"Helena\", \"Igor\", \"Juliana\",\r",
											"        \"Kleber\", \"Larissa\", \"Marcos\", \"Natalia\", \"Ot√°vio\", \"Paula\", \"Qu√©sia\", \"Rafael\", \"Simone\", \"Thiago\",\r",
											"        \"Ursula\", \"Vanessa\", \"Wesley\", \"Xuxa\", \"Yara\", \"Zeca\", \"Amanda\", \"Breno\", \"Camila\", \"Diego\",\r",
											"        \"Elaine\", \"Felipe\", \"Gustavo\", \"Helo√≠sa\", \"Isabela\", \"Jo√£o\", \"Karen\", \"Leonardo\", \"Manuela\", \"N√≠colas\"\r",
											"    ];\r",
											"\r",
											"    const sobrenomes = [\r",
											"        \"Almeida\", \"Barbosa\", \"Cardoso\", \"Dias\", \"Esteves\", \"Fernandes\", \"Gomes\", \"Henrique\", \"Igreja\", \"Jardim\",\r",
											"        \"Klein\", \"Lima\", \"Macedo\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Queiroz\", \"Ribeiro\", \"Silva\", \"Teixeira\",\r",
											"        \"Uchoa\", \"Vieira\", \"Werneck\", \"Xavier\", \"Yamada\", \"Zanetti\", \"Azevedo\", \"Batista\", \"Campos\", \"Domingues\",\r",
											"        \"Esp√≠ndola\", \"Farias\", \"Garcia\", \"Hernandes\", \"In√°cio\", \"Junqueira\", \"Kawasaki\", \"Leite\", \"Moraes\", \"Neves\"\r",
											"    ];\r",
											"\r",
											"    const nomesGerados = [];\r",
											"    const sobrenomesGerados = [];\r",
											"\r",
											"    for (let i = 0; i < 200; i++) {\r",
											"        const nome = primeirosNomes[Math.floor(Math.random() * primeirosNomes.length)];\r",
											"        const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
											"        nomesGerados.push(nome);\r",
											"        sobrenomesGerados.push(sobrenome);\r",
											"    }\r",
											"\r",
											"    return { nomes: nomesGerados, sobrenomes: sobrenomesGerados };\r",
											"}\r",
											"\r",
											"// NOVA FUN√á√ÉO PARA PEGAR UM NOME COMPLETO ALEAT√ìRIO\r",
											"function gerarNomePessoaAleatoria() {\r",
											"    const { nomes, sobrenomes } = gerarNomesESobrenomes();\r",
											"    const index = Math.floor(Math.random() * nomes.length);\r",
											"    return `${nomes[index]} ${sobrenomes[index]}`;\r",
											"}\r",
											"\r",
											"// Gerando os dados\r",
											"const responsavel = gerarNomePessoaAleatoria();\r",
											"const empresa = \"Empresa \" + responsavel.split(\" \")[0];\r",
											"const cnpj = gerarCNPJ();\r",
											"const email = gerarEmail(responsavel);\r",
											"const telefone = gerarTelefone();\r",
											"const numeroEndereco = gerarNumeroEndereco();\r",
											"\r",
											"const payload = {\r",
											"    corporateName: empresa + \" Ltda\",\r",
											"    registerCompany: cnpj,\r",
											"    mail: email,\r",
											"    matriz: \"Unidade Teste\",\r",
											"    responsibleContact: responsavel,\r",
											"    telephone: telefone,\r",
											"    serviceDescription: \"Servi√ßos diversos\",\r",
											"    address: [\r",
											"        {\r",
											"            zipCode: \"09710000\",\r",
											"            city: \"S√£o Bernardo do Campo\",\r",
											"            state: \"SP\",\r",
											"            district: \"Centro\",\r",
											"            street: \"Rua Teste Automatizado\",\r",
											"            number: numeroEndereco,\r",
											"            complement: \"Sala 1\",\r",
											"            country: \"Brasil\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"// Setando vari√°veis no ambiente do Postman\r",
											"pm.environment.set(\"corporateName\", payload.corporateName);\r",
											"pm.environment.set(\"registerCompany\", payload.registerCompany);\r",
											"pm.environment.set(\"mail\", payload.mail);\r",
											"pm.environment.set(\"matriz\", payload.matriz);\r",
											"pm.environment.set(\"responsibleContact\", payload.responsibleContact);\r",
											"pm.environment.set(\"telephone\", payload.telephone);\r",
											"pm.environment.set(\"serviceDescription\", payload.serviceDescription);\r",
											"pm.environment.set(\"zipCode\", payload.address[0].zipCode);\r",
											"pm.environment.set(\"city\", payload.address[0].city);\r",
											"pm.environment.set(\"state\", payload.address[0].state);\r",
											"pm.environment.set(\"district\", payload.address[0].district);\r",
											"pm.environment.set(\"street\", payload.address[0].street);\r",
											"pm.environment.set(\"number\", payload.address[0].number);\r",
											"pm.environment.set(\"complement\", payload.address[0].complement);\r",
											"pm.environment.set(\"country\", payload.address[0].country);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Falha quando o CNPJ √© inv√°lido\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"\r",
											"    const mensagens = pm.response.json().error.join(\" \").toLowerCase();\r",
											"    pm.expect(mensagens).to.include(\"cnpj\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"563258\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}\r\n/*O campo est√° aceitando apenas n√∫meros com mais de 10 d√≠gitos, o que pode ser excessivo para a maioria dos casos.\r\nA mensagem de valida√ß√£o atual informa apenas que o campo deve conter \"apenas n√∫meros\", sem especificar um limite m√°ximo de caracteres.\r\nAl√©m disso, muitos endere√ßos reais incluem letras como complemento (ex: \"12A\", \"45B\"), ent√£o seria importante permitir esse tipo de entrada.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listCompany",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status da resposta √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"// Pegar a resposta em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Verifica se existe pelo menos um item no array\r",
											"if (response.length > 0) {\r",
											"    // Captura o _id do primeiro objeto\r",
											"    let companyId = response[0]._id;\r",
											"\r",
											"    // Armazena como vari√°vel de ambiente\r",
											"    pm.environment.set(\"companyId\", companyId);\r",
											"\r",
											"    console.log(\"Company ID salvo:\", companyId);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODVjODM5MTcyOWI2MGRlNDFjZDhjYzAiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR3UElFL0djUHM4bjQ2V1FHTzRvR3pPNHFESGFTZWw3RFVmRTVHOXlwVVVINmZVc1U0aWRMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVhcnRhLWZlaXJhLCAyNS8wNi8yMDI1LCAyMDoxNzozNyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY4NWM4MzkxNzI5YjYwZGU0MWNkOGNjMSJ9XSwiX192IjowLCJpYXQiOjE3NTE0NzcwMDksImV4cCI6MTc1MTU2MzQwOX0.zPZZ78M9-Vg-EaBnHi2QSnKPp9ZU7JLxQy0wH1XNLZQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cont√©m os campos principais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Objeto da empresa cont√©m os campos obrigat√≥rios\", function () {\r",
											"    const responseData = pm.response.json()[0]; // ou ajuste conforme a estrutura\r",
											"\r",
											"    pm.expect(responseData).to.include.keys(\r",
											"        '_id', 'corporateName', 'registerCompany', 'responsibleContact', 'mail',\r",
											"        'telephone', 'serviceDescription', 'matriz', 'status', 'address', 'audit'\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODVjODM5MTcyOWI2MGRlNDFjZDhjYzAiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR3UElFL0djUHM4bjQ2V1FHTzRvR3pPNHFESGFTZWw3RFVmRTVHOXlwVVVINmZVc1U0aWRMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVhcnRhLWZlaXJhLCAyNS8wNi8yMDI1LCAyMDoxNzozNyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY4NWM4MzkxNzI5YjYwZGU0MWNkOGNjMSJ9XSwiX192IjowLCJpYXQiOjE3NTE0NzcwMDksImV4cCI6MTc1MTU2MzQwOX0.zPZZ78M9-Vg-EaBnHi2QSnKPp9ZU7JLxQy0wH1XNLZQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cont√©m um endere√ßo completo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Endere√ßo cont√©m todos os campos obrigat√≥rios\", function () {\r",
											"    const address = pm.response.json()[0].address[0];\r",
											"\r",
											"    pm.expect(address).to.have.all.keys(\r",
											"        'country', 'zipCode', 'city', 'state', 'district',\r",
											"        'street', 'number', 'complement', '_id'\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODVjODM5MTcyOWI2MGRlNDFjZDhjYzAiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR3UElFL0djUHM4bjQ2V1FHTzRvR3pPNHFESGFTZWw3RFVmRTVHOXlwVVVINmZVc1U0aWRMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVhcnRhLWZlaXJhLCAyNS8wNi8yMDI1LCAyMDoxNzozNyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY4NWM4MzkxNzI5YjYwZGU0MWNkOGNjMSJ9XSwiX192IjowLCJpYXQiOjE3NTE0NzcwMDksImV4cCI6MTc1MTU2MzQwOX0.zPZZ78M9-Vg-EaBnHi2QSnKPp9ZU7JLxQy0wH1XNLZQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "dados de auditoria est√£o presentes e corretos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dados de auditoria est√£o presentes e v√°lidos\", function () {\r",
											"    const audit = pm.response.json()[0].audit[0];\r",
											"\r",
											"    pm.expect(audit).to.have.property('registeredBy');\r",
											"    pm.expect(audit.registeredBy).to.have.all.keys('userId', 'userLogin');\r",
											"    pm.expect(audit).to.have.property('registrationDate').that.is.a('string').and.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODVjODM5MTcyOWI2MGRlNDFjZDhjYzAiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR3UElFL0djUHM4bjQ2V1FHTzRvR3pPNHFESGFTZWw3RFVmRTVHOXlwVVVINmZVc1U0aWRMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVhcnRhLWZlaXJhLCAyNS8wNi8yMDI1LCAyMDoxNzozNyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY4NWM4MzkxNzI5YjYwZGU0MWNkOGNjMSJ9XSwiX192IjowLCJpYXQiOjE3NTE0NzcwMDksImV4cCI6MTc1MTU2MzQwOX0.zPZZ78M9-Vg-EaBnHi2QSnKPp9ZU7JLxQy0wH1XNLZQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando endpoint errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna 404 se endpoint n√£o existe\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODVjODM5MTcyOWI2MGRlNDFjZDhjYzAiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR3UElFL0djUHM4bjQ2V1FHTzRvR3pPNHFESGFTZWw3RFVmRTVHOXlwVVVINmZVc1U0aWRMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVhcnRhLWZlaXJhLCAyNS8wNi8yMDI1LCAyMDoxNzozNyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY4NWM4MzkxNzI5YjYwZGU0MWNkOGNjMSJ9XSwiX192IjowLCJpYXQiOjE3NTE0NzcwMDksImV4cCI6MTc1MTU2MzQwOX0.zPZZ78M9-Vg-EaBnHi2QSnKPp9ZU7JLxQy0wH1XNLZQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}compan",
									"host": [
										"{{url}}compan"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando n√£o exixte token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna 403 quando n√£o h√° token\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.include(\"No token provided\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODVjODM5MTcyOWI2MGRlNDFjZDhjYzAiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR3UElFL0djUHM4bjQ2V1FHTzRvR3pPNHFESGFTZWw3RFVmRTVHOXlwVVVINmZVc1U0aWRMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVhcnRhLWZlaXJhLCAyNS8wNi8yMDI1LCAyMDoxNzozNyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY4NWM4MzkxNzI5YjYwZGU0MWNkOGNjMSJ9XSwiX192IjowLCJpYXQiOjE3NTE0NzcwMDksImV4cCI6MTc1MTU2MzQwOX0.zPZZ78M9-Vg-EaBnHi2QSnKPp9ZU7JLxQy0wH1XNLZQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upDateCompanyID 23296",
					"item": [
						{
							"name": "üìçstatus 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"TechViision Solu√ß√µes Digitais Ltda\",\r\n  \"registerCompany\": \"12458456000146\",\r\n  \"mail\": \"contato@techvision.com.br\",\r\n  \"matriz\": \"Campinas\",\r\n  \"responsibleContact\": \"M√°rcio Calabreso\",\r\n  \"telephone\": \"1998888777744\",\r\n  \"serviceDescription\": \"Desenvolvimento de software personalizado e consultoria em TI\"\r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "o Content-Type √© application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"TechVision Solu√ß√µes Digitais Ltda\",\r\n  \"registerCompany\": \"12458456000146\",\r\n  \"mail\": \"contato@techvision.com.br\",\r\n  \"matriz\": \"Campinas\",\r\n  \"responsibleContact\": \"M√°rcio Calabreso\",\r\n  \"telephone\": \"1998888777744\",\r\n  \"serviceDescription\": \"Desenvolvimento de software personalizado e consultoria em TI\"\r\n}\r\n\r\n/*erro no backend relacionado ao uso da vari√°vel res\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "cont√©m um campo espec√≠fico (ex: id ou message)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response contains 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"TechVision Solu√ß√µes Digitais Ltda\",\r\n  \"registerCompany\": \"12458456000146\",\r\n  \"mail\": \"contato@techvision.com.br\",\r\n  \"matriz\": \"Campinas\",\r\n  \"responsibleContact\": \"M√°rcio Calabreso\",\r\n  \"telephone\": \"1998888777744\",\r\n  \"serviceDescription\": \"Desenvolvimento de software personalizado e consultoria em TI\"\r\n}\r\n\r\n/*erro no backend relacionado ao uso da vari√°vel res\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "falha com campos ausente e retorna 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"mensagem de erro presente\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message || responseJson.error).to.exist;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"\",\r\n  \"registerCompany\": \"12458456000146\",\r\n  \"mail\": \"contato@techvision.com.br\",\r\n  \"matriz\": \"Campinas\",\r\n  \"responsibleContact\": \"M√°rcio Calabreso\",\r\n  \"telephone\": \"1998888777744\",\r\n  \"serviceDescription\": \"Desenvolvimento de software personalizado e consultoria em TI\"\r\n}\r\n\r\n/*erro no backend relacionado ao uso da vari√°vel res\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando id e invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna erro 500 ao enviar 'companyId' inv√°lido\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"\r",
											"    const responseJson = pm.response.json();\r",
											"    const error = responseJson.error;\r",
											"\r",
											"    let found = false;\r",
											"\r",
											"    if (Array.isArray(error)) {\r",
											"        found = error.some(msg => typeof msg === \"string\" && msg.toLowerCase().includes(\"erro\"));\r",
											"    } else if (typeof error === \"string\") {\r",
											"        found = error.toLowerCase().includes(\"erro\");\r",
											"    } else if (typeof error === \"object\" && error.message) {\r",
											"        found = error.message.toLowerCase().includes(\"erro\");\r",
											"    }\r",
											"\r",
											"    pm.expect(found).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"empresa angelica\",\r\n  \"registerCompany\": \"12458456000146\",\r\n  \"mail\": \"contato@techvision.com.br\",\r\n  \"matriz\": \"Campinas\",\r\n  \"responsibleContact\": \"M√°rcio Calabreso\",\r\n  \"telephone\": \"1998888777744\",\r\n  \"serviceDescription\": \"Desenvolvimento de software personalizado e consultoria em TI\"\r\n}\r\n\r\n/*erro no backend relacionado ao uso da vari√°vel res\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/52665895324556",
									"host": [
										"{{url}}company"
									],
									"path": [
										"52665895324556"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "countCompany",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status da resposta √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}company/count",
									"host": [
										"{{url}}company"
									],
									"path": [
										"count"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "corpo da resposta √© um objeto JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Corpo da resposta √© um objeto JSON\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}company/count",
									"host": [
										"{{url}}company"
									],
									"path": [
										"count"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "campo count existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Campo 'count' est√° presente na resposta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('count');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}company/count",
									"host": [
										"{{url}}company"
									],
									"path": [
										"count"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "count √© um n√∫mero positivo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Valor de 'count' √© um n√∫mero positivo\", function () {\r",
											"    const count = pm.response.json().count;\r",
											"    pm.expect(count).to.be.a('number').and.to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}company/count",
									"host": [
										"{{url}}company"
									],
									"path": [
										"count"
									],
									"query": [
										{
											"key": "Token",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetCompanybyID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status da resposta √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao exibe os dados da consulta apenas o estatus",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "corpo da resposta existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Corpo da resposta √© um JSON v√°lido existente\", function () {\r",
											"    pm.response.to.have.body(); // Verifica se h√° corpo\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); // Verifica tipo\r",
											"    const jsonData = pm.response.json(); // Tenta fazer o parse\r",
											"    pm.expect(jsonData).to.be.an(\"object\"); // Verifica que √© um objeto\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se endpoin nao exixte",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna 404 se endpoint n√£o existe\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "updateAddressCompany",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna status 201 com sucesso\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5053265895\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n//Se der sebd varias vezes nao da mensagem de que endere√ßo do id ja foi atualizado retorna apenas status 201 E ATUALIZA CONSTANTEMENTE",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/address/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "presen√ßa de campo obrigatorio no objeto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate the presence of required fields in the updateCompany object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.updateCompany).to.exist.and.to.be.an('object');\r",
											"    \r",
											"    const requiredFields = ['_id', 'corporateName', 'registerCompany', 'responsibleContact', 'mail', 'telephone', 'serviceDescription', 'matriz', 'status', 'address', 'audit'];\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData.updateCompany).to.have.property(field);\r",
											"    });\r",
											"\r",
											"    pm.expect(responseData.updateCompany.address).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(responseData.updateCompany.audit).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5053265895\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n//Se der sebd varias vezes nao da mensagem de que endere√ßo do id ja foi atualizado retorna apenas status 201 E ATUALIZA CONSTANTEMENTE",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/address/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "formato telefone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure telephone is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.updateCompany).to.exist;\r",
											"    pm.expect(responseData.updateCompany.telephone).to.exist;\r",
											"\r",
											"    const phoneRegex = /^\\d{10,14}$/;\r",
											"    pm.expect(responseData.updateCompany.telephone).to.match(phoneRegex, \"Telephone format is invalid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5053265895\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n//Se der sebd varias vezes nao da mensagem de que endere√ßo do id ja foi atualizado retorna apenas status 201 E ATUALIZA CONSTANTEMENTE",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/address/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se atualizado mesmo id e retorna msg deid ja atualizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Falha ao atualizar mesmo ID j√° atualizado\", function () {\r",
											"    // Espera que a API retorne 400 ou 409 (dependendo da regra de neg√≥cio)\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Verifica se a resposta cont√©m a chave correta\r",
											"    pm.expect(jsonData).to.have.any.keys(\"msg\", \"errors\", \"alert\");\r",
											"\r",
											"    // Verifica se a mensagem inclui \"j√° atualizado\"\r",
											"    if (jsonData.msg) {\r",
											"        pm.expect(jsonData.msg).to.include(\"j√° atualizado\");\r",
											"    } else if (jsonData.errors) {\r",
											"        pm.expect(jsonData.errors[0]).to.include(\"j√° atualizado\");\r",
											"    } else if (jsonData.alert) {\r",
											"        pm.expect(jsonData.alert).to.include(\"j√° atualizado\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"S√£o Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5053265895\",\r\n      \"complement\": \"de 4503 ao fim - lado √≠mpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n//Se der sebd varias vezes nao da mensagem de que endere√ßo do id ja foi atualizado retorna apenas status 201 E ATUALIZA CONSTANTEMENTE",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/address/68a8a9c7cec232b1ccc620da",
									"host": [
										"{{url}}company"
									],
									"path": [
										"address",
										"68a8a9c7cec232b1ccc620da"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "üìçupdateStatusID",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n/* deveria retornar mensagem de que ja foi atualizado",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "formato telefone valido Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Telefone possui formato v√°lido (10 a 14 d√≠gitos)\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const phoneRegex = /^\\d{10,14}$/;\r",
											"\r",
											"    pm.expect(responseData.updateCompany.telephone).to.match(phoneRegex);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n/* deveria retornar mensagem de que ja foi atualizado",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "meg de sucesso esta presente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mensagem de sucesso na atualiza√ß√£o\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.msg).to.equal(\"Status da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n//nao deveria retornar mensagem de que ja foi atualizado?",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "status foi atualizado para true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status da empresa atualizado para true\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.updateCompany.status).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n//nao deveria retornar mensagem de que ja foi atualizado?",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "respostas esperadas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Endere√ßo cont√©m campos esperados no primeiro item do array\", function () {\r",
											"    const company = pm.response.json().updateCompany;\r",
											"\r",
											"    pm.expect(company).to.have.property(\"address\");\r",
											"    pm.expect(company.address).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const address = company.address[0]; // pega o primeiro endere√ßo\r",
											"\r",
											"    pm.expect(address).to.have.property(\"country\");\r",
											"    pm.expect(address).to.have.property(\"city\");\r",
											"    pm.expect(address).to.have.property(\"state\");\r",
											"    pm.expect(address).to.have.property(\"zipCode\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n//nao deveria retornar mensagem de que ja foi atualizado?",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se atualizo mesmo id retorna 400 quando atualizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna 400 quando o status da companhia j√° foi atualizado\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"\r",
											"    // Verifica se a mensagem indica que o status j√° foi atualizado\r",
											"    pm.expect(responseData.message).to.include(\"Status da companhia j√° foi atualizado\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n//nao deveria retornar mensagem de que ja foi atualizado?",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se atualizo mesmo id retorna 400 quando atualizado Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Retorna 400 quando companyId n√£o existe\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem de erro correta quando companyId n√£o existe\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"msg\", \"Essa companhia n√£o existem em nossa base de dados.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n//nao deveria retornar mensagem de que ja foi atualizado?",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/status/",
									"host": [
										"{{url}}company"
									],
									"path": [
										"status",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "deletCompany",
					"item": [
						{
							"name": "0status 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*O erro que aparece no Postman:\r\n\r\njson\r\nCopiar\r\nEditar\r\n{\r\n  \"error\": \"TypeError: companyRepository.findByIddelete is not a function\"\r\n}\r\nsignifica que o servidor tentou chamar uma fun√ß√£o chamada findByIddelete, mas essa fun√ß√£o n√£o existe.\r\n\r\n‚úÖ Causa mais prov√°vel:\r\nNo backend (Node.js, NestJS, Express, etc.), o c√≥digo tem algo como:\r\n\r\njs\r\nCopiar\r\nEditar\r\nconst company = companyRepository.findByIddelete(id);\r\nMas n√£o existe nenhuma fun√ß√£o chamada findByIddelete.\r\n\r\nüõ†Ô∏è Como corrigir:\r\nProvavelmente o nome correto da fun√ß√£o seria:\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.findById(id)\r\nou\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.delete(id)\r\nou, dependendo da lib/framework:\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.findOne(id)\r\n‚úÖ O que voc√™ deve fazer:\r\nVerifique o c√≥digo do backend onde a rota DELETE /company/:id √© tratada.\r\n\r\nProcure onde est√° escrito findByIddelete e corrija para a fun√ß√£o correta do companyRepository.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletCompany",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*O erro que aparece no Postman:\r\n\r\njson\r\nCopiar\r\nEditar\r\n{\r\n  \"error\": \"TypeError: companyRepository.findByIddelete is not a function\"\r\n}\r\nsignifica que o servidor tentou chamar uma fun√ß√£o chamada findByIddelete, mas essa fun√ß√£o n√£o existe.\r\n\r\n‚úÖ Causa mais prov√°vel:\r\nNo backend (Node.js, NestJS, Express, etc.), o c√≥digo tem algo como:\r\n\r\njs\r\nCopiar\r\nEditar\r\nconst company = companyRepository.findByIddelete(id);\r\nMas n√£o existe nenhuma fun√ß√£o chamada findByIddelete.\r\n\r\nüõ†Ô∏è Como corrigir:\r\nProvavelmente o nome correto da fun√ß√£o seria:\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.findById(id)\r\nou\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.delete(id)\r\nou, dependendo da lib/framework:\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.findOne(id)\r\n‚úÖ O que voc√™ deve fazer:\r\nVerifique o c√≥digo do backend onde a rota DELETE /company/:id √© tratada.\r\n\r\nProcure onde est√° escrito findByIddelete e corrija para a fun√ß√£o correta do companyRepository.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "msg de sucesso ao deletar compania",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem de sucesso ao deletar companhia\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Companhia deletada com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*O erro que aparece no Postman:\r\n\r\njson\r\nCopiar\r\nEditar\r\n{\r\n  \"error\": \"TypeError: companyRepository.findByIddelete is not a function\"\r\n}\r\nsignifica que o servidor tentou chamar uma fun√ß√£o chamada findByIddelete, mas essa fun√ß√£o n√£o existe.\r\n\r\n‚úÖ Causa mais prov√°vel:\r\nNo backend (Node.js, NestJS, Express, etc.), o c√≥digo tem algo como:\r\n\r\njs\r\nCopiar\r\nEditar\r\nconst company = companyRepository.findByIddelete(id);\r\nMas n√£o existe nenhuma fun√ß√£o chamada findByIddelete.\r\n\r\nüõ†Ô∏è Como corrigir:\r\nProvavelmente o nome correto da fun√ß√£o seria:\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.findById(id)\r\nou\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.delete(id)\r\nou, dependendo da lib/framework:\r\n\r\njs\r\nCopiar\r\nEditar\r\ncompanyRepository.findOne(id)\r\n‚úÖ O que voc√™ deve fazer:\r\nVerifique o c√≥digo do backend onde a rota DELETE /company/:id √© tratada.\r\n\r\nProcure onde est√° escrito findByIddelete e corrija para a fun√ß√£o correta do companyRepository.*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando dou send novamente e retorna msg de erro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mensagem de erro correta\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Essa companhia n√£o existem em nossa base de dados.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha quando nao exixte variavel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"companyId n√£o est√° definido\", function () {\r",
											"    pm.expect(pm.variables.get(\"companyId\")).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/",
									"host": [
										"{{url}}company"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "üõëBord",
			"item": [
				{
					"name": "createBoard",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNamesRaw = pm.environment.get(\"boardNamesList\");\r",
											"\r",
											"try {\r",
											"    let boardNames = JSON.parse(boardNamesRaw);\r",
											"    let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"    if (currentIndex < boardNames.length) {\r",
											"        let currentBoardName = boardNames[currentIndex];\r",
											"\r",
											"        // Salva o nome com espa√ßos no ambiente\r",
											"        pm.environment.set(\"boardName\", currentBoardName);\r",
											"\r",
											"        // Atualiza o √≠ndice para o pr√≥ximo nome\r",
											"        pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"\r",
											"        console.log(\"Nome gerado:\", currentBoardName);\r",
											"    } else {\r",
											"        console.log(\"Todos os nomes j√° foram usados.\");\r",
											"    }\r",
											"} catch (e) {\r",
											"    console.log(\"Erro ao processar boardNamesList:\", e);\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code √© 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"{{boardName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "verifica se resposta e json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNames = JSON.parse(pm.environment.get(\"boardNamesList\"));\r",
											"let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"if (currentIndex < boardNames.length) {\r",
											"    let currentBoardName = boardNames[currentIndex];\r",
											"    pm.environment.set(\"boardName\", currentBoardName);\r",
											"    pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"} else {\r",
											"    console.log(\"Todos os nomes j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta est√° em formato JSON\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{boardName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "verifica se resposta e json Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNames = JSON.parse(pm.environment.get(\"boardNamesList\"));\r",
											"let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"if (currentIndex < boardNames.length) {\r",
											"    let currentBoardName = boardNames[currentIndex];\r",
											"    pm.environment.set(\"boardName\", currentBoardName);\r",
											"    pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"} else {\r",
											"    console.log(\"Todos os nomes j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mensagem de sucesso est√° correta\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Cadastro realizado com sucesso!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{boardName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar se o status √© \"true\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNames = JSON.parse(pm.environment.get(\"boardNamesList\"));\r",
											"let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"if (currentIndex < boardNames.length) {\r",
											"    let currentBoardName = boardNames[currentIndex];\r",
											"    pm.environment.set(\"boardName\", currentBoardName);\r",
											"    pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"} else {\r",
											"    console.log(\"Todos os nomes j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status √© true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verifica se newBoard existe\r",
											"    pm.expect(jsonData).to.have.property(\"newBoard\");\r",
											"\r",
											"    // Verifica se status existe dentro de newBoard\r",
											"    pm.expect(jsonData.newBoard).to.have.property(\"status\");\r",
											"\r",
											"    // Verifica se status √© true\r",
											"    pm.expect(jsonData.newBoard.status).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{boardName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica mensagem de erro",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNames = JSON.parse(pm.environment.get(\"boardNamesList\"));\r",
											"let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"if (currentIndex < boardNames.length) {\r",
											"    let currentBoardName = boardNames[currentIndex];\r",
											"    pm.environment.set(\"boardName\", currentBoardName);\r",
											"    pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"} else {\r",
											"    console.log(\"Todos os nomes j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Existe ao menos uma mensagem de erro\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.length).to.be.above(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se exixte a propriedade error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNames = JSON.parse(pm.environment.get(\"boardNamesList\"));\r",
											"let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"if (currentIndex < boardNames.length) {\r",
											"    let currentBoardName = boardNames[currentIndex];\r",
											"    pm.environment.set(\"boardName\", currentBoardName);\r",
											"    pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"} else {\r",
											"    console.log(\"Todos os nomes j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta cont√©m 'error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se exixte a palavra obrigatorio na msg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let boardNames = JSON.parse(pm.environment.get(\"boardNamesList\"));\r",
											"let currentIndex = parseInt(pm.environment.get(\"currentBoardIndex\") || \"0\");\r",
											"\r",
											"if (currentIndex < boardNames.length) {\r",
											"    let currentBoardName = boardNames[currentIndex];\r",
											"    pm.environment.set(\"boardName\", currentBoardName);\r",
											"    pm.environment.set(\"currentBoardIndex\", currentIndex + 1);\r",
											"} else {\r",
											"    console.log(\"Todos os nomes j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mensagem de erro menciona 'obrigat√≥rio'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error[0]).to.include(\"obrigat√≥rio\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listBoard",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Pegar a resposta em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Verifica se existe pelo menos um item no array\r",
											"if (response.length > 0) {\r",
											"    // Captura o _id do primeiro objeto\r",
											"    let companyId = response[0]._id;\r",
											"\r",
											"    // Armazena como vari√°vel de ambiente\r",
											"    pm.environment.set(\"bordId\", companyId);\r",
											"\r",
											"    console.log(\"Bord ID salvo:\", companyId);\r",
											"}pm.test(\"Status HTTP √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "verifica se no array exixte pelo menos um board",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Existe ao menos um board\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o primeiro board tem a propriedade boardName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Board tem 'boardName'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property(\"boardName\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o status do primeiro board √© true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status do board √© true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].status).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verifica se o status HTTP N√ÉO √© 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status HTTP n√£o √© 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}boar",
									"host": [
										"{{url}}boar"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verifica se o tipo de conte√∫do √© HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type √© text/html com charset\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.include('text/html');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}boar",
									"host": [
										"{{url}}boar"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha Verifica se o corpo da resposta cont√©m HTML e menciona o erro 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Corpo da resposta cont√©m HTML\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.include('<!DOCTYPE html>');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}boar",
									"host": [
										"{{url}}boar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "countBoard",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status HTTP √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/count",
									"host": [
										"{{url}}board"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "tem count como numero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta tem 'count' como n√∫mero\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"count\");\r",
											"    pm.expect(jsonData.count).to.be.a(\"number\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/count",
									"host": [
										"{{url}}board"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "! falha se nao tem count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta n√£o tem 'count'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.not.have.property(\"count\");\r",
											"});\r",
											"/* ao provocar a falha retirando count do end point notei que o status ainda da 200 e retorna resposta de body normalmente\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/",
									"host": [
										"{{url}}board"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se html nao esta vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body contains HTML structure\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.include('<!DOCTYPE html>');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body contains HTML structure\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.include('<!DOCTYPE html>');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pm.test(\"Response status code is 404\", function () {\r\n    pm.expect(pm.response.code).to.equal(404);\r\n});",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listByID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status HTTP √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "resposta e um objeto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta √© um objeto\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "tem propriedade board",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta tem 'board'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"board\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "bord tem _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Board tem '_id'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.board).to.have.property(\"_id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica status 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status HTTP 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/68a7a54bcec232b1ccc607",
									"host": [
										"{{url}}board"
									],
									"path": [
										"68a7a54bcec232b1ccc607"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se o campo e _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro menciona campo '_id'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"_id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/68a7a54bcec232b1ccc607",
									"host": [
										"{{url}}board"
									],
									"path": [
										"68a7a54bcec232b1ccc607"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "üìçupdateBoardID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"{{boardNameId}}\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "campos existem quando presentes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate the updatedBoard.audit structure\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const auditArray = responseData.updatedBoard.audit;\r",
											"\r",
											"    pm.expect(auditArray).to.be.an('array');\r",
											"\r",
											"    auditArray.forEach(function(auditItem) {\r",
											"        pm.expect(auditItem).to.be.an('object');\r",
											"\r",
											"        // Verifica se os campos esperados existem, se estiverem presentes\r",
											"        if (auditItem.hasOwnProperty('registeredBy')) {\r",
											"            pm.expect(auditItem.registeredBy).to.be.an('object');\r",
											"            pm.expect(auditItem.registeredBy).to.have.property('userId').that.is.a('string');\r",
											"            pm.expect(auditItem.registeredBy).to.have.property('userLogin').that.is.a('string');\r",
											"        }\r",
											"\r",
											"        if (auditItem.hasOwnProperty('registrationDate')) {\r",
											"            pm.expect(auditItem.registrationDate).to.be.a('string');\r",
											"        }\r",
											"\r",
											"        if (auditItem.hasOwnProperty('_id')) {\r",
											"            pm.expect(auditItem._id).to.be.a('string');\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"{{boardNameId}}\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "data √© uma string n√£o vazia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se os campos de data s√£o strings v√°lidas\r",
											"pm.test(\"Campos de data s√£o strings n√£o vazias\", function () {\r",
											"    const audit = pm.response.json().updatedBoard.audit;\r",
											"\r",
											"    audit.forEach(item => {\r",
											"        if (item.registrationDate) {\r",
											"            pm.expect(item.registrationDate).to.be.a(\"string\").that.is.not.empty;\r",
											"        }\r",
											"        if (item.updateDate) {\r",
											"            pm.expect(item.updateDate).to.be.a(\"string\").that.is.not.empty;\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"{{boardNameId}}\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "data √© uma string n√£o vazia Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se os campos de data s√£o strings v√°lidas\r",
											"pm.test(\"Campos de data s√£o strings n√£o vazias\", function () {\r",
											"    const audit = pm.response.json().updatedBoard.audit;\r",
											"\r",
											"    audit.forEach(item => {\r",
											"        if (item.registrationDate) {\r",
											"            pm.expect(item.registrationDate).to.be.a(\"string\").that.is.not.empty;\r",
											"        }\r",
											"        if (item.updateDate) {\r",
											"            pm.expect(item.updateDate).to.be.a(\"string\").that.is.not.empty;\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"{{boardNameId}}\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cada item de audit tem _id e autor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se cada item de audit tem _id e um dos campos: registeredBy ou updatedBy\r",
											"pm.test(\"Cada item de audit tem _id e autor\", function () {\r",
											"    const audit = pm.response.json().updatedBoard.audit;\r",
											"\r",
											"    audit.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"_id\");\r",
											"\r",
											"        // Verifica se tem registeredBy ou updatedBy\r",
											"        pm.expect(item).to.satisfy(obj =>\r",
											"            obj.hasOwnProperty(\"registeredBy\") || obj.hasOwnProperty(\"updatedBy\")\r",
											"        );\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"{{boardNameId}}\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{bordId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{bordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se status e 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code √© 500\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(500);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"empresa casa\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{currentBoardIndex}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{currentBoardIndex}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se resposta tem campo erro",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response should contain the error field\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"empresa casa\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{boardNameId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{boardNameId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se o campo error e um string nao vazia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeAleatorio() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `OperacoesKarol${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let boardNamesList = JSON.parse(pm.environment.get(\"boardNamesList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeAleatorio();\r",
											"    tentativas++;\r",
											"} while (boardNamesList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    pm.environment.set(\"upDateboardNameId\", nomeUnico);\r",
											"    boardNamesList.push(nomeUnico);\r",
											"    pm.environment.set(\"boardNamesList\", JSON.stringify(boardNamesList));\r",
											"    console.log(\"Nome gerado:\", nomeUnico);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Error √© string n√£o vazia\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error field should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"boardName\": \"empresa casa\"\r\n}\r\n/* nao aceita o contrato e se coloco diretoria retorna que o campo diretoria e obrigatorio\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}board/{{boardNameId}}",
									"host": [
										"{{url}}board"
									],
									"path": [
										"{{boardNameId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üõëCostCenter",
			"item": [
				{
					"name": "creatCostCenter",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "O tipo de conte√∫do da resposta √© application/json.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar o objeto newCostCenter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Validate the newCostCenter object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newCostCenter).to.exist.and.to.be.an('object');\r",
											"\r",
											"    pm.expect(responseData.newCostCenter.costCenterName).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.newCostCenter.costCenterCode).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.newCostCenter.board).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.newCostCenter.status).to.exist.and.to.be.a('boolean');\r",
											"    pm.expect(responseData.newCostCenter.audit).to.exist.and.to.be.an('array');\r",
											"\r",
											"    responseData.newCostCenter.audit.forEach(function(auditItem) {\r",
											"        pm.expect(auditItem).to.be.an('object');\r",
											"        pm.expect(auditItem.registrationDate).to.exist.and.to.be.a('string');\r",
											"        pm.expect(auditItem.registeredBy).to.exist.and.to.be.an('object');\r",
											"\r",
											"        pm.expect(auditItem.registeredBy.userId).to.exist.and.to.be.a('string');\r",
											"        pm.expect(auditItem.registeredBy.userLogin).to.exist.and.to.be.a('string');\r",
											"        pm.expect(auditItem._id).to.exist.and.to.be.a('string');\r",
											"    });\r",
											"\r",
											"    pm.expect(responseData.newCostCenter._id).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.newCostCenter.__v).to.exist.and.to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "contem pelo menons um objeto valido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Audit array contains at least one object with valid registrationDate and registeredBy fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('newCostCenter');\r",
											"    pm.expect(responseData.newCostCenter).to.have.property('audit').that.is.an('array').with.lengthOf.at.least(1);\r",
											"    \r",
											"    const auditEntries = responseData.newCostCenter.audit;\r",
											"    \r",
											"    let hasValidEntry = false;\r",
											"    auditEntries.forEach(entry => {\r",
											"        if (entry.registrationDate && entry.registeredBy && entry.registeredBy.userId && entry.registeredBy.userLogin) {\r",
											"            hasValidEntry = true;\r",
											"        }\r",
											"    });\r",
											"    \r",
											"    pm.expect(hasValidEntry).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e retorna status 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCe",
									"host": [
										"{{url}}costCe"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e retorna Content-Type text/html",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response content type is text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCe",
									"host": [
										"{{url}}costCe"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Body vazio ou HTML de erro",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty or HTML error page\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData === \"\" || responseData.startsWith(\"<!DOCTYPE html>\")).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCe",
									"host": [
										"{{url}}costCe"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e retorna Schema para erro 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarNomeCentroCusto() {\r",
											"    const letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"    const setores = [\r",
											"        \"RH\", \"Financeiro\", \"Logistica\", \"Comercial\", \"Juridico\",\r",
											"        \"TI\", \"Marketing\", \"Producao\", \"Compras\", \"Expedicao\"\r",
											"    ];\r",
											"\r",
											"    let setor = setores[Math.floor(Math.random() * setores.length)];\r",
											"    let sufixo = \"\";\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        sufixo += letras.charAt(Math.floor(Math.random() * letras.length));\r",
											"    }\r",
											"\r",
											"    return `${setor}${sufixo}`.replace(/\\s/g, \"\");\r",
											"}\r",
											"\r",
											"let costCenterList = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"\r",
											"let nomeUnico;\r",
											"let tentativas = 0;\r",
											"do {\r",
											"    nomeUnico = gerarNomeCentroCusto();\r",
											"    tentativas++;\r",
											"} while (costCenterList.includes(nomeUnico) && tentativas < 50);\r",
											"\r",
											"if (tentativas >= 50) {\r",
											"    console.log(\"N√£o foi poss√≠vel gerar um nome √∫nico ap√≥s 50 tentativas.\");\r",
											"} else {\r",
											"    let costCenterName = `Marketing Digital ${nomeUnico}`;\r",
											"    pm.environment.set(\"costCenterName\", costCenterName);\r",
											"\r",
											"    // Monta o body completo j√° como vari√°vel\r",
											"    let body = {\r",
											"        costCenterName: costCenterName,\r",
											"        boardId: pm.environment.get(\"boardId\")\r",
											"    };\r",
											"    pm.environment.set(\"costCenterBody\", JSON.stringify(body));\r",
											"\r",
											"    costCenterList.push(nomeUnico);\r",
											"    pm.environment.set(\"costCenterList\", JSON.stringify(costCenterList));\r",
											"    \r",
											"    console.log(\"Centro de custo gerado:\", costCenterName);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response schema for 404 error is as expected\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type') || \"\";\r",
											"\r",
											"    if (contentType.includes(\"application/json\")) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(pm.response.code).to.equal(404);\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
											"        pm.expect(responseData).to.have.property('message').that.is.a('string');\r",
											"    } else {\r",
											"        console.log(\"Resposta n√£o √© JSON, veio HTML de erro 404\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCenterName\": \"{{costCenterName}}\",\r\n  \"boardId\": \"{{bordId}}\"\r\n}/* nao esta criando",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCe",
									"host": [
										"{{url}}costCe"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listCostCenter",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"/* Extrai os _id de cada centro de custo da resposta*/\r",
											"const responseData = pm.response.json();\r",
											"let ids = responseData.map(item => item._id);\r",
											"\r",
											"/*Salva como string JSON no ambiente*/\r",
											"pm.environment.set(\"costCenterList\", JSON.stringify(ids));\r",
											"\r",
											"/* Zera o √≠ndice para come√ßar do primeiro*/\r",
											"pm.environment.set(\"currentCostCenterIndex\", \"0\");\r",
											"\r",
											"console.log(\"IDs capturados:\", ids);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta √© um array e cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is an array and contains required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(item => {\r",
											"        pm.expect(item).to.be.an('object');\r",
											"        // Verifica apenas se possui os campos esperados, permite campos extras\r",
											"        ['_id', 'costCenterName', 'costCenterCode', 'board', 'status', 'audit'].forEach(key => {\r",
											"            pm.expect(item).to.have.property(key);\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "objeto Board cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Board object contains required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(item => {\r",
											"        if (item.board) { // verifica se board existe\r",
											"            pm.expect(item.board).to.be.an('object')\r",
											"                .that.includes.keys('_id', 'boardName', 'boardCode', 'status', 'audit');\r",
											"\r",
											"            if (Array.isArray(item.board.audit)) {\r",
											"                item.board.audit.forEach(auditItem => {\r",
											"                    if (auditItem.registeredBy) {\r",
											"                        pm.expect(auditItem.registeredBy).to.be.an('object')\r",
											"                            .that.includes.keys('userId', 'userLogin');\r",
											"                    } else {\r",
											"                        console.log(\"registeredBy n√£o encontrado no auditItem do board\");\r",
											"                    }\r",
											"                });\r",
											"            } else {\r",
											"                console.log(\"audit n√£o √© um array ou n√£o existe no board\");\r",
											"            }\r",
											"        } else {\r",
											"            console.log(\"board n√£o existe neste item\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se Content-Type text/html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response content type is text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCen",
									"host": [
										"{{url}}costCen"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se Body vazio ou HTML de erro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the response body is empty or HTML error page\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData === \"\" || responseData.startsWith(\"<!DOCTYPE html>\")).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCen",
									"host": [
										"{{url}}costCen"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha se Response adheres to the expected error schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response adheres to the expected error schema\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
											"\r",
											"    if (contentType.includes(\"application/json\")) {\r",
											"        const responseData = pm.response.json();\r",
											"\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData).to.have.property('error');\r",
											"        pm.expect(responseData.error).to.have.property('code').that.is.a('number');\r",
											"        pm.expect(responseData.error).to.have.property('message').that.is.a('string').and.is.not.empty;\r",
											"    } else {\r",
											"        console.log(\"Resposta n√£o √© JSON, veio HTML de erro\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCen",
									"host": [
										"{{url}}costCen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "countCostCenter",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/count",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta cont√©m o campo obrigat√≥rio 'count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required field 'count'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('count');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/count",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "O campo 'count' √© um inteiro n√£o negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"pm.test(\"Count is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.count).to.exist;\r",
											"    pm.expect(responseData.count).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/count",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tipo de conte√∫do da resposta √© application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/count",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se status code e 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}cost",
									"host": [
										"{{url}}cost"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Content-Type inclui 'text/html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type inclui 'text/html'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}cost",
									"host": [
										"{{url}}cost"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Corpo da resposta cont√©m HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Corpo da resposta cont√©m HTML\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData).to.include(\"<!DOCTYPE html>\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}cost",
									"host": [
										"{{url}}cost"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Resposta n√£o √© JSON, √© HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resposta n√£o √© JSON, √© HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}cost",
									"host": [
										"{{url}}cost"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "costCenterByID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O campo status deve ser um valor booleano (verdadeiro ou falso).",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status field must be a boolean value\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.costCenter).to.exist;\r",
											"    pm.expect(responseData.costCenter.status).to.exist.and.to.be.a('boolean');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "costCenterByID Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response contains 'costCenter' field\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('costCenter');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O objeto costCenter possui todos os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"costCenter has required fields\", function () {\r",
											"    const costCenter = pm.response.json().costCenter;\r",
											"\r",
											"    pm.expect(costCenter).to.be.an('object');\r",
											"    pm.expect(costCenter).to.include.keys('_id', 'costCenterName', 'costCenterCode', 'board', 'status');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "status 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/68a8fdf5cec232b1ccc674",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"68a8fdf5cec232b1ccc674"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e O cabe√ßalho Content-Type da resposta est√° correto e indica que o conte√∫do √© do tipo application/json.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/68a8fdf5cec232b1ccc674",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"68a8fdf5cec232b1ccc674"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e O tempo de resposta foi inferior a 200 milissegundos ‚Äî ou seja, a API respondeu rapidamente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/68a8fdf5cec232b1ccc674",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"68a8fdf5cec232b1ccc674"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e o A estrutura do JSON de erro est√° correta, com os campos esperados (como error, message, status, etc.).",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let ids = JSON.parse(pm.environment.get(\"costCenterList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentCostCenterIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    let currentId = ids[index];\r",
											"    pm.environment.set(\"currentCostCenterId\", currentId);\r",
											"    pm.environment.set(\"currentCostCenterIndex\", index + 1);\r",
											"    console.log(\"Usando ID:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response contains an error message field\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}costCenter/68a8fdf5cec232b1ccc674",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"68a8fdf5cec232b1ccc674"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "üìçupDateCostCenterID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCentername\": \"Marketing\",\r\n  \"boardId\": \"64e51573d94be9062773f6da\"\r\n}\r\n/*nao esta reconhecendo contrato, o que est√° acontecendo aqui √© um desalinhamento entre o contrato da API e o que o backend realmente espera.*\\"
								},
								"url": {
									"raw": "{{url}}costCenter/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCentername\": \"Marketing\",\r\n  \"boardId\": \"64e51573d94be9062773f6da\"\r\n}\r\n/*nao esta reconhecendo contrato, o que est√° acontecendo aqui √© um desalinhamento entre o contrato da API e o que o backend realmente espera.*\\"
								},
								"url": {
									"raw": "{{url}}costCenter/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e o pm.test(\"O campo 'error' √© um array n√£o vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Error field is a non-empty array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCentername\": \"Marketing\",\r\n  \"boardId\": \"64e51573d94be9062773f6da\"\r\n}\r\n/*nao esta reconhecendo contrato, o que est√° acontecendo aqui √© um desalinhamento entre o contrato da API e o que o backend realmente espera.*\\"
								},
								"url": {
									"raw": "{{url}}costCenter/68953b62d477c7609b3a7c98",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"68953b62d477c7609b3a7c98"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se A resposta corresponde ao esquema esperado para mensagens de erro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response matches the expected schema for error messages\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error').that.is.an('array');\r",
											"    responseData.error.forEach(function(err) {\r",
											"        pm.expect(err).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"costCentername\": \"Marketing\",\r\n  \"boardId\": \"64e51573d94be9062773f6da\"\r\n}\r\n/*nao esta reconhecendo contrato, o que est√° acontecendo aqui √© um desalinhamento entre o contrato da API e o que o backend realmente espera.*\\"
								},
								"url": {
									"raw": "{{url}}costCenter/68953b62d477c7609b3a7c98",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"68953b62d477c7609b3a7c98"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "üéàupDateStatusID",
					"item": [
						{
							"name": "status 208",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 208\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(208);\r",
											"});\r",
											"\r",
											"/*mensagem nao corresponde a solicita√ß√£o da estrutura*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/*mensagem n√£o condiz com esperado*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upDateStatusID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"The msg field must not be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.msg).to.exist.and.to.have.lengthOf.at.least(1, \"msg field should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tipo de conte√∫do da resposta √© application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O esquema da resposta corresponde √† estrutura esperada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response schema matches the expected structure\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('msg').that.is.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/{{currentCostCenterId}}",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"{{currentCostCenterId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O esquema da resposta corresponde √† estrutura esperada Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(500);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/68a8fdf5cec232b1ccc675689",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"68a8fdf5cec232b1ccc675689"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica A resposta est√° em um formato JSON v√°lido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has a valid JSON format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/68a8fdf5cec232b1ccc675689",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"68a8fdf5cec232b1ccc675689"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se A mensagem de erro est√° presente e n√£o est√° vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Error message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/68a8fdf5cec232b1ccc675689",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"68a8fdf5cec232b1ccc675689"
									]
								}
							},
							"response": []
						},
						{
							"name": "fakha e verifica se A estrutura da resposta de erro est√° conforme o esperado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response schema matches expected structure for error responses\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}costCenter/status/68a8fdf5cec232b1ccc675689",
									"host": [
										"{{url}}costCenter"
									],
									"path": [
										"status",
										"68a8fdf5cec232b1ccc675689"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üõëDepartament",
			"item": [
				{
					"name": "creatDepartment",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o objeto newDepartment cont√©m os campos esperados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"NewDepartment object contains valid fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const dept = responseData.newDepartment;\r",
											"\r",
											"    pm.expect(dept).to.be.an('object');\r",
											"    pm.expect(dept).to.have.property('departmentName').that.is.a('string');\r",
											"    pm.expect(dept).to.have.property('costCenter').that.is.a('string');\r",
											"    pm.expect(dept).to.have.property('status').that.is.a('boolean');\r",
											"    pm.expect(dept).to.have.property('_id').that.is.a('string');\r",
											"    pm.expect(dept).to.have.property('audit').that.is.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se a data de registro est√° em formato leg√≠vel (dd/mm/yyyy, hh:mm:ss BRT)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"RegistrationDate is in a readable format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const auditList = responseData.newDepartment.audit;\r",
											"\r",
											"    pm.expect(auditList).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    auditList.forEach(function(auditEntry) {\r",
											"        pm.expect(auditEntry).to.have.property('registrationDate').that.is.a('string');\r",
											"        pm.expect(auditEntry.registrationDate).to.match(/\\d{2}\\/\\d{2}\\/\\d{4}, \\d{2}:\\d{2}:\\d{2} BRT/, \"RegistrationDate should be in readable format\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o objeto registeredBy cont√©m os campos esperados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"RegisteredBy object contains valid fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const auditList = responseData.newDepartment.audit;\r",
											"\r",
											"    pm.expect(auditList).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    auditList.forEach(auditEntry => {\r",
											"        pm.expect(auditEntry).to.have.property('registeredBy').that.is.an('object');\r",
											"        pm.expect(auditEntry.registeredBy).to.have.property('userId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(auditEntry.registeredBy).to.have.property('userLogin').that.is.a('string').and.not.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "status 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departm",
									"host": [
										"{{url}}departm"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica Verifica se o tempo de resposta foi inferior a 200 milissegundos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response content type includes 'text/html'\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.include('text/html');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departm",
									"host": [
										"{{url}}departm"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica pm.test(\"Response body contains HTML",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departm",
									"host": [
										"{{url}}departm"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica pm.test(\"Response schema should be an object only if JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes\r",
											"const nomes = [\r",
											"  \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Amanda\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"// Lista de setores\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\",\r",
											"  \"Fiscal\", \"Cont√°bil\", \"Suprimentos\", \"Vendas\", \"Qualidade\", \"Produ√ß√£o\", \"Servi√ßos\", \"Atendimento\", \"Expedi√ß√£o\", \"Estoque\",\r",
											"  \"Manuten√ß√£o\", \"Engenharia\", \"Planejamento\", \"Or√ßamento\", \"Auditoria\", \"Treinamento\", \"Recrutamento\", \"Seguran√ßa\", \"Transportes\", \"Tecnologia\",\r",
											"  \"Inova√ß√£o\", \"Pesquisa\", \"Desenvolvimento\", \"Relacionamento\", \"Cobran√ßa\", \"Recebimento\", \"Faturamento\", \"Cr√©dito\", \"Cadastro\", \"Documenta√ß√£o\",\r",
											"  \"Contratos\", \"Licita√ß√µes\", \"Gest√£o\", \"Administra√ß√£o\", \"Opera√ß√µes\", \"Distribui√ß√£o\", \"Infraestrutura\", \"Sustentabilidade\", \"Ambiental\", \"Social\",\r",
											"  \"Cultura\", \"Eventos\", \"Comunica√ß√£o\", \"Imprensa\", \"Design\", \"Cria√ß√£o\", \"Digital\", \"E-commerce\", \"M√≠dia\", \"Publicidade\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento\r",
											"const nomeDepartamento = `Departamento ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response schema should be an object only if JSON\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"\r",
											"    if (contentType && contentType.includes('application/json')) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(Object.keys(responseData)).to.have.lengthOf(0, \"Response object should be empty\");\r",
											"    } else {\r",
											"        console.warn(\"Resposta n√£o √© JSON. Ignorando valida√ß√£o de schema.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n\r\n/*A mensagem nao corresponde a solicita√ß√£o, e n√£o reflete o contexto da opera√ß√£o. Como estou criando um departamento, */\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departm",
									"host": [
										"{{url}}departm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listDepartment",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"const responseData = pm.response.json();\r",
											"\r",
											"// Extrai todos os _id dos departamentos\r",
											"const ids = responseData.map(dept => dept._id);\r",
											"\r",
											"// Salva como string JSON no ambiente\r",
											"pm.environment.set(\"departmentIdList\", JSON.stringify(ids));\r",
											"\r",
											"// Zera o √≠ndice para come√ßar do primeiro\r",
											"pm.environment.set(\"currentDepartmentIndex\", \"0\");\r",
											"\r",
											"console.log(\"IDs de departamentos salvos:\", ids);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta tem um tipo de conte√∫do v√°lido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has a valid Content-Type of application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "O objeto costCenter cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response is an array with at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "listDepartment Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"pm.test(\"Each department object includes required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    \r",
											"    responseData.forEach(department => {\r",
											"        pm.expect(department).to.include.all.keys('_id', 'departmentName', 'costCenter', 'status');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "O objeto costCenter cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"CostCenter object contains required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(department => {\r",
											"        if (department.costCenter && typeof department.costCenter === 'object') {\r",
											"            pm.expect(department.costCenter).to.include.all.keys('_id', 'costCenterName', 'costCenterCode', 'board', 'status', 'audit');\r",
											"\r",
											"            if (Array.isArray(department.costCenter.audit) && department.costCenter.audit.length > 0) {\r",
											"                department.costCenter.audit.forEach(auditItem => {\r",
											"                    if (auditItem.registeredBy) {\r",
											"                        pm.expect(auditItem.registeredBy).to.include.all.keys('userId', 'userLogin');\r",
											"                    }\r",
											"                });\r",
											"            } else {\r",
											"                console.warn(\"Audit est√° vazio ou ausente para costCenter:\", department.costCenter._id);\r",
											"            }\r",
											"        } else {\r",
											"            console.warn(\"CostCenter ausente ou inv√°lido para department:\", department._id);\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/",
									"host": [
										"{{url}}department"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "status 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}depart",
									"host": [
										"{{url}}depart"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verifica se o Content-Type inclui 'text/html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Content-Type includes 'text/html'\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.include('text/html');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}depart",
									"host": [
										"{{url}}depart"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha eVerifica se o corpo da resposta cont√©m HTML (n√£o est√° vazio)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response body contains HTML\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.include('<!DOCTYPE html>');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}depart",
									"host": [
										"{{url}}depart"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Valida o schema da resposta 404 apenas se for JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response schema for 404 error is valid only if JSON\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"\r",
											"    if (contentType && contentType.includes('application/json')) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
											"        pm.expect(responseData).to.have.property('message').that.is.a('string');\r",
											"    } else {\r",
											"        console.warn(\"Resposta n√£o √© JSON. Ignorando valida√ß√£o de schema.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "//nao retorna a resposta apenas status 201",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}depart",
									"host": [
										"{{url}}depart"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "countDepartment",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/count",
									"host": [
										"{{url}}department"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/count",
									"host": [
										"{{url}}department"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta cont√©m o campo obrigat√≥rio 'count'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required field 'count'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('count');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/count",
									"host": [
										"{{url}}department"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Count √© um n√∫mero inteiro n√£o negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Count is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.count).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Count should be a non-negative integer\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/count",
									"host": [
										"{{url}}department"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "O Content-Type da resposta inclui application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response Content-Type includes application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/count",
									"host": [
										"{{url}}department"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica status 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme",
									"host": [
										"{{url}}departme"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se \"O tipo de conte√∫do inclui text/html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Content-Type includes text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"text/html\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme",
									"host": [
										"{{url}}departme"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response body contains HTML\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData).to.include(\"<!DOCTYPE html>\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme",
									"host": [
										"{{url}}departme"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica seO JSON da resposta √© um objeto vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response JSON is empty object (if applicable)\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    \r",
											"    if (contentType && contentType.includes(\"application/json\")) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object').that.is.empty;\r",
											"    } else {\r",
											"        console.log(\"Resposta n√£o √© JSON. Teste ignorado.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme",
									"host": [
										"{{url}}departme"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "showDepartamentID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se a resposta tem os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response has required fields: department, costCenter, and audit\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.department).to.exist;\r",
											"    pm.expect(responseData.department.costCenter).to.exist;\r",
											"    pm.expect(responseData.department.audit).to.exist;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se costCenterName e costCenterCode s√£o strings n√£o vazias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Cost Center Name and Code must be non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('department').that.is.an('object');\r",
											"    pm.expect(responseData.department.costCenter).to.have.property('costCenterName').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Cost Center Name should not be empty\");\r",
											"    pm.expect(responseData.department.costCenter).to.have.property('costCenterCode').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Cost Center Code should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o array audit cont√©m objetos v√°lidos com os campos registeredBy e registrationDate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Audit array contains valid objects with registeredBy and registrationDate fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.department.audit).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.department.audit.forEach(function(auditEntry) {\r",
											"        pm.expect(auditEntry).to.be.an('object');\r",
											"        pm.expect(auditEntry.registeredBy).to.be.an('object').that.includes.keys('userId', 'userLogin');\r",
											"        pm.expect(auditEntry.registrationDate).to.exist.and.to.be.a('string').that.is.not.empty;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica status 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme{{departmentId}}",
									"host": [
										"{{url}}departme{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se O tipo de conte√∫do da resposta inclui text/html",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response Content-Type includes text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme{{departmentId}}",
									"host": [
										"{{url}}departme{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se \"O corpo da resposta cont√©m HTML",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response body contains HTML\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData).to.include('<!DOCTYPE html>');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme{{departmentId}}",
									"host": [
										"{{url}}departme{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Response body contains HTML",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"departmentIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"currentDepartmentIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const currentId = ids[index];\r",
											"    pm.environment.set(\"departmentId\", currentId);\r",
											"    pm.environment.set(\"currentDepartmentIndex\", index + 1);\r",
											"    console.log(\"Usando departmentId:\", currentId);\r",
											"} else {\r",
											"    console.log(\"Todos os IDs de departamentos j√° foram usados.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response schema for 404 error is valid (if JSON)\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    if (contentType && contentType.includes('application/json')) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object').that.has.all.keys('error', 'message');\r",
											"        pm.expect(responseData.error).to.be.a('string');\r",
											"        pm.expect(responseData.message).to.be.a('string');\r",
											"    } else {\r",
											"        console.log(\"Resposta n√£o est√° em JSON. Teste ignorado.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}departme{{departmentId}}",
									"host": [
										"{{url}}departme{{departmentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upDateDepartamentID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tipo de conte√∫do da resposta √© application/json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "\"O departamento atualizado possui os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Updated Department has required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('updatedDepartment');\r",
											"    \r",
											"    const updatedDepartment = responseData.updatedDepartment;\r",
											"    pm.expect(updatedDepartment).to.include.all.keys('_id', 'departmentName', 'costCenter', 'status', 'audit', '__v');\r",
											"    pm.expect(updatedDepartment.audit).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    updatedDepartment.audit.forEach(auditEntry => {\r",
											"        pm.expect(auditEntry).to.have.property('_id');\r",
											"\r",
											"        const actor = auditEntry.registeredBy || auditEntry.updatedBy;\r",
											"        pm.expect(actor).to.be.an('object').that.includes.all.keys('userId', 'userLogin');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As datas da auditoria correspondem ao padr√£o esperado.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Audit dates match expected pattern\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const auditArray = responseData.updatedDepartment.audit;\r",
											"\r",
											"    const dateRegex = /\\d{2}\\/\\d{2}\\/\\d{4}/;\r",
											"\r",
											"    auditArray.forEach(entry => {\r",
											"        const dateStr = entry.registrationDate || entry.updateDate;\r",
											"        pm.expect(dateStr).to.match(dateRegex, \"Date does not match expected format dd/MM/yyyy\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upDateDepartamentID Copy 4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departmen{{departmentId}}",
									"host": [
										"{{url}}departmen{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha eVerificar se o Content-Type √© text/html (falhou por causa do charset",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O tipo de conte√∫do inclui 'text/html'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departmen{{departmentId}}",
									"host": [
										"{{url}}departmen{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verificar se o corpo da resposta est√° vazio (falhou porque veio HTML)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O corpo da resposta cont√©m HTML\", function () {\r",
											"    const responseBody = pm.response.text();\r",
											"    pm.expect(responseBody).to.include('<!DOCTYPE html>');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departmen{{departmentId}}",
									"host": [
										"{{url}}departmen{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e alidar se a URL da requisi√ß√£o est√° formatada corretamente (falhou por usar vari√°vel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lista de nomes e setores\r",
											"const nomes = [\r",
											"  \"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"\r",
											"];\r",
											"\r",
											"const setores = [\r",
											"  \"Adm\", \"RH\", \"Financeiro\", \"TI\", \"Jur√≠dico\", \"Comercial\", \"Marketing\", \"Log√≠stica\", \"Compras\", \"Projetos\"\r",
											"];\r",
											"\r",
											"// Gera nome aleat√≥rio\r",
											"const nomeAleatorio = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"const setorAleatorio = setores[Math.floor(Math.random() * setores.length)];\r",
											"\r",
											"// Monta o nome do departamento com prefixo \"Depart\"\r",
											"const nomeDepartamento = `Depart ${nomeAleatorio} ${setorAleatorio}`;\r",
											"\r",
											"// Salva como vari√°vel de ambiente\r",
											"pm.environment.set(\"departmentName\", nomeDepartamento);\r",
											"\r",
											"// Exibe no console para confer√™ncia\r",
											"console.log(\"Nome gerado:\", nomeDepartamento);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A URL da requisi√ß√£o est√° formatada corretamente\", function () {\r",
											"    const requestUrl = pm.request.url.toString();\r",
											"    const expectedPattern = /departmen\\d+/; // ignora {{url}} e foca na parte din√¢mica\r",
											"    pm.expect(requestUrl).to.match(expectedPattern);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"departmentName\": \"{{departmentName}}\",\r\n  \"costCenterId\": \"{{currentCostCenterId}}\"\r\n}\r\n\r\n/*mas n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}departmen{{departmentId}}",
									"host": [
										"{{url}}departmen{{departmentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "üìçupDateStatusDepartamentID",
					"item": [
						{
							"name": "status 202",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 202\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(202);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/status/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"status",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upDateStatusDepartamentID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('msg');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/status/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"status",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/status/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"status",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "\"A mensagem cont√©m texto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.msg).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/status/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"status",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "status 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/statu/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"statu",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se \"O cabe√ßalho Content-Type inclui 'text/html'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"O cabe√ßalho Content-Type inclui 'text/html'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/statu/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"statu",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se O tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"O tempo de resposta √© menor que 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/statu/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"statu",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se A resposta 404 n√£o est√° em formato JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"A resposta 404 n√£o est√° em formato JSON\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}\r\n/* a mensagem  n√£o reflete bem o contexto da opera√ß√£o.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}department/statu/{{departmentId}}",
									"host": [
										"{{url}}department"
									],
									"path": [
										"statu",
										"{{departmentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üõëClient",
			"item": [
				{
					"name": "creatClient",
					"item": [
						{
							"name": "status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta cont√©m os campos obrigat√≥rios no objeto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A resposta cont√©m os campos obrigat√≥rios no objeto newClient\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newClient).to.exist;\r",
											"\r",
											"    const newClient = responseData.newClient;\r",
											"    pm.expect(newClient).to.have.all.keys('fullName', 'birthDate', 'mail', 'phone', 'currentRole', 'documents', 'address', 'audit', '_id', '__v');\r",
											"\r",
											"    newClient.documents.forEach(doc => {\r",
											"        pm.expect(doc).to.have.all.keys('cpf', 'rg', '_id');\r",
											"    });\r",
											"\r",
											"    newClient.address.forEach(addr => {\r",
											"        pm.expect(addr).to.have.all.keys('country', 'zipCode', 'city', 'state', 'district', 'street', 'number', 'complement', '_id');\r",
											"    });\r",
											"\r",
											"    newClient.audit.forEach(aud => {\r",
											"        pm.expect(aud).to.have.all.keys('registrationDate', 'registeredBy', 'registrationNumber', '_id');\r",
											"        pm.expect(aud.registeredBy).to.have.all.keys('userId', 'userLogin');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar a estrutura do array documents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar a estrutura do array documents\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newClient).to.have.property('documents').that.is.an('array');\r",
											"\r",
											"    responseData.newClient.documents.forEach(function(document) {\r",
											"        pm.expect(document).to.be.an('object');\r",
											"        pm.expect(document).to.include.all.keys('cpf', 'rg', '_id');\r",
											"        pm.expect(document.cpf).to.be.a('string');\r",
											"        pm.expect(document.rg).to.be.a('string');\r",
											"        pm.expect(document._id).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar se o campo mail est√° em formato de e-mail v√°lido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o campo mail est√° em formato de e-mail v√°lido\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.newClient).to.exist;\r",
											"    pm.expect(responseData.newClient.mail).to.exist;\r",
											"    pm.expect(responseData.newClient.mail).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Formato de e-mail inv√°lido\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "stataus 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}clien",
									"host": [
										"{{url}}clien"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica tempo de resposta",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}clien",
									"host": [
										"{{url}}clien"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Content-Type inclui 'text/html",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Content-Type inclui 'text/html'\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.include(\"text/html\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}clien",
									"host": [
										"{{url}}clien"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Corpo da resposta n√£o cont√©m dados JSON\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Corpo da resposta n√£o cont√©m dados JSON\", function () {\r",
											"    const responseBody = pm.response.text();\r",
											"    pm.expect(responseBody).to.not.include(\"{\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}clien",
									"host": [
										"{{url}}clien"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica a mensagem de erro",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCPF() {\r",
											"    return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
											"}\r",
											"\r",
											"function gerarRG() {\r",
											"    return Math.floor(1000000 + Math.random() * 9000000).toString();\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarDataNascimento() {\r",
											"    let ano = Math.floor(1970 + Math.random() * 30);\r",
											"    let mes = String(Math.floor(1 + Math.random() * 12)).padStart(2, '0');\r",
											"    let dia = String(Math.floor(1 + Math.random() * 28)).padStart(2, '0');\r",
											"    return `${dia}${mes}${ano}`;\r",
											"}\r",
											"\r",
											"function gerarNome() {\r",
											"    const nomes = [\"Amanda\", \"Gely\", \"Victor\", \"Lorenzo\", \"Karol\", \"Bruna\", \"Lucas\", \"Jo√£o\", \"Camila\", \"Rafael\",\r",
											"  \"Ana\", \"Pedro\", \"Juliana\", \"Felipe\", \"Mariana\", \"Thiago\", \"Beatriz\", \"Rodrigo\", \"Larissa\", \"Gabriel\",\r",
											"  \"Fernanda\", \"Eduardo\", \"Patr√≠cia\", \"Vin√≠cius\", \"Aline\", \"Daniel\", \"Let√≠cia\", \"Andr√©\", \"Tatiane\", \"Diego\",\r",
											"  \"Sabrina\", \"Marcelo\", \"Carla\", \"Renato\", \"Vanessa\", \"Bruno\", \"Nat√°lia\", \"Leandro\", \"Isabela\", \"Alex\",\r",
											"  \"Simone\", \"C√©sar\", \"Elaine\", \"Murilo\", \"D√©bora\", \"F√°bio\", \"Caroline\", \"Wesley\", \"J√©ssica\", \"Renata\",\r",
											"  \"Hugo\", \"Cristiane\", \"Maur√≠cio\", \"Viviane\", \"Paulo\", \"Michele\", \"Roberto\", \"Tain√°\", \"Alexandre\", \"Luana\",\r",
											"  \"Caio\", \"Daniele\", \"Henrique\", \"Milena\", \"Gustavo\", \"Tatiana\", \"Ricardo\", \"L√≠via\", \"Samuel\", \"Priscila\",\r",
											"  \"Matheus\", \"Kelly\", \"Jonathan\", \"Rafaela\", \"Fernando\", \"Bianca\", \"Vitor\", \"C√≠ntia\", \"Ruan\", \"Emanuelle\",\r",
											"  \"Igor\", \"Lorena\", \"Ant√¥nio\", \"Nathalia\", \"Jorge\", \"Talita\", \"Rog√©rio\", \"Esther\", \"Alessandro\", \"Nicole\",\r",
											"  \"Jos√©\", \"Manuela\", \"Miguel\", \"Cl√°udia\", \"Wellington\", \"Sueli\", \"Ot√°vio\", \"Regina\", \"Luciano\", \"Silvia\",\r",
											"  \"Nelson\", \"Cristina\", \"Sandro\", \"J√∫lia\", \"Ronaldo\", \"Marta\", \"Celso\", \"Eliane\", \"Adriano\", \"Rosana\",\r",
											"  \"J√∫nior\", \"Neide\", \"Evandro\", \"Graziella\", \"Emerson\", \"Tereza\", \"Valter\", \"Clarice\", \"Alberto\", \"Helena\",\r",
											"  \"Elias\", \"Rita\", \"Marcos\", \"Angela\", \"Claudio\", \"Catarina\", \"S√©rgio\", \"B√°rbara\", \"Francisco\", \"Denise\",\r",
											"  \"Edson\", \"Marisa\", \"Gilberto\", \"Cristina\", \"Joaquim\", \"Sandra\", \"Washington\", \"Solange\", \"Sebasti√£o\", \"Noemi\",\r",
											"  \"Everaldo\", \"Fabiana\", \"Ismael\", \"Gisele\", \"Jeferson\", \"Ros√¢ngela\", \"Valdir\", \"Luciana\", \"Carlos\", \"Tamires\",\r",
											"  \"Nicolas\", \"Yasmin\", \"Otto\", \"Brenda\", \"Enzo\", \"Melissa\", \"Caetano\", \"Isis\", \"Davi\", \"Giovana\",\r",
											"  \"Anderson\", \"Thais\", \"Rafael\", \"Lara\", \"Danilo\", \"Elo√°\", \"Alan\", \"P√¢mela\", \"Cristiano\", \"Jana√≠na\",\r",
											"  \"Raul\", \"Mirela\", \"Nathan\", \"Tatiane\", \"Eduarda\", \"Heitor\", \"J√∫lio\", \"Suelen\", \"Lucia\", \"Mateus\",\r",
											"  \"Rebeca\", \"Saulo\", \"Fab√≠ola\", \"T√∫lio\", \"Naiara\", \"Ot√°via\", \"Jordana\", \"Cael\", \"Marcio\", \"Elisa\",\r",
											"  \"Nayara\", \"Andressa\", \"William\", \"Geovana\", \"Luan\", \"Brigida\", \"R√¥mulo\", \"C√°ssia\", \"Cristov√£o\", \"Clarissa\",\r",
											"  \"Ezequiel\", \"Marli\", \"J√¥natas\", \"Vivian\", \"Rodolfo\", \"Jussara\", \"Val√©ria\", \"Hermes\", \"C√©lia\", \"N√©lio\",\r",
											"  \"Tales\", \"Magda\", \"Gilmar\", \"Ivone\", \"Jair\", \"M√¥nica\", \"Adriel\", \"Nair\", \"Eurico\", \"Zuleica\",\r",
											"  \"Ari\", \"Ivana\", \"Nivaldo\", \"Zilda\", \"Osvaldo\", \"Dalva\", \"Rubens\", \"Carmen\", \"Almir\", \"Ione\",\r",
											"  \"Genival\", \"Marilda\", \"Arnaldo\", \"Josefa\", \"Vicente\", \"Nadir\", \"Dorival\", \"Zenaide\", \"Janu√°rio\", \"Irene\",\r",
											"  \"Valmir\", \"Eunice\", \"Agenor\", \"Luzia\", \"Ben√≠cio\", \"Sebastiana\", \"Eron\", \"T√¢nia\", \"Gilson\", \"Neusa\",\r",
											"  \"Adelmo\", \"Ivonete\", \"Aldo\", \"Z√©lia\", \"Eronildo\", \"Cida\", \"Jucelino\", \"Ivonilda\", \"Alo√≠sio\", \"Marinete\"];\r",
											"    const sobrenomes = [\"Carvalho\", \"Silva\", \"Souza\", \"Oliveira\", \"Costa\", \"Pereira\", \"Rodrigues\", \"Almeida\",\r",
											"  \"Santos\", \"Barbosa\", \"Martins\", \"Ferreira\", \"Lima\", \"Gomes\", \"Ara√∫jo\", \"Mendes\", \"Nascimento\", \"Ribeiro\", \"Teixeira\",\r",
											"  \"Monteiro\", \"Rocha\", \"Vieira\", \"Cavalcante\", \"Dias\", \"Andrade\", \"Correia\", \"Batista\", \"Freitas\", \"Cardoso\",\r",
											"  \"Campos\", \"Moraes\", \"Moreira\", \"Fonseca\", \"Pinheiro\", \"Tavares\", \"Bezerra\", \"Neves\", \"Miranda\", \"Coelho\",\r",
											"  \"Antunes\", \"Farias\", \"Machado\", \"Borges\", \"Pinto\", \"Sales\", \"Ramos\", \"Azevedo\", \"Castro\", \"Cunha\",\r",
											"  \"Barros\", \"Siqueira\", \"Assis\", \"Rezende\", \"Guimar√£es\", \"Brand√£o\", \"Vasconcelos\", \"Macedo\", \"Leite\", \"Amaral\",\r",
											"  \"Alves\", \"Nogueira\", \"Sim√µes\", \"Torres\", \"Aguiar\", \"Queiroz\", \"Duarte\", \"Brito\", \"Xavier\", \"Henrique\",\r",
											"  \"Figueiredo\", \"Cordeiro\", \"Lopes\", \"Mello\", \"Chaves\", \"Camargo\", \"Sampaio\", \"Valente\", \"Pacheco\", \"Teles\",\r",
											"  \"Barreto\", \"Serpa\", \"Moura\", \"Severino\", \"Gon√ßalves\", \"Rezende\", \"Cavalcanti\", \"Peixoto\", \"Menezes\", \"Rangel\",\r",
											"  \"Serrano\", \"Beltr√£o\", \"Franco\", \"Bicalho\", \"Lacerda\", \"Prado\", \"Souto\", \"Viana\", \"Bastos\", \"Louren√ßo\",\r",
											"  \"Trindade\", \"Castilho\", \"Matos\", \"Cavalheiro\", \"Cezar\", \"Alencar\", \"Benevides\", \"Torrado\", \"Furtado\", \"Goulart\",\r",
											"  \"Lobato\", \"Maranh√£o\", \"Pimentel\", \"Saldanha\", \"Sarmento\", \"Targino\", \"Vilela\", \"Zanetti\", \"Zanardi\", \"Zanotto\",\r",
											"  \"Zanella\", \"Zanini\", \"Zanin\", \"Zamboni\", \"Zampieri\", \"Zaniboni\", \"Zanirato\", \"Zanotti\", \"Zanette\", \"Zanotelli\",\r",
											"  \"Zanella\", \"Zanoni\", \"Zanuro\", \"Zanurov\", \"Zanurovic\", \"Zanurova\", \"Zanuroff\", \"Zanurich\", \"Zanurini\", \"Zanurato\",\r",
											"  \"Zanurino\", \"Zanurini\", \"Zanuratti\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\",\r",
											"  \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\", \"Zanurazzi\"];\r",
											"    return `${nomes[Math.floor(Math.random() * nomes.length)]} ${sobrenomes[Math.floor(Math.random() * sobrenomes.length)]}`;\r",
											"}\r",
											"\r",
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(nome, index) {\r",
											"    const dominios = [\"carol.org\", \"teste.com\", \"cliente.com\"];\r",
											"    let nomeLimpo = limparTexto(nome);\r",
											"    return `${nomeLimpo}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarEndereco(index) {\r",
											"    const cidades = [\"Bel√©m\", \"Taquaritinga\", \"S√£o Paulo\", \"Campinas\", \"Fortaleza\",\r",
											"  \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Porto Alegre\", \"Salvador\",\r",
											"  \"Recife\", \"Manaus\", \"Goi√¢nia\", \"Bras√≠lia\", \"Natal\",\r",
											"  \"Jo√£o Pessoa\", \"Macei√≥\", \"Aracaju\", \"Cuiab√°\", \"Campo Grande\",\r",
											"  \"Vit√≥ria\", \"Florian√≥polis\", \"S√£o Lu√≠s\", \"Teresina\", \"Macap√°\",\r",
											"  \"Palmas\", \"Ribeir√£o Preto\", \"Sorocaba\", \"Santos\", \"Uberl√¢ndia\",\r",
											"  \"Juiz de Fora\", \"Londrina\", \"Niter√≥i\", \"Caxias do Sul\", \"Joinville\",\r",
											"  \"An√°polis\", \"Piracicaba\", \"Mar√≠lia\", \"Itu\", \"Franca\",\r",
											"  \"S√£o Carlos\", \"Barueri\", \"Osasco\", \"Diadema\", \"Carapicu√≠ba\",\r",
											"  \"Guarulhos\", \"S√£o Bernardo do Campo\", \"S√£o Caetano do Sul\", \"Mogi das Cruzes\", \"Suzano\",\r",
											"  \"Taubat√©\", \"Jacare√≠\", \"Jundia√≠\", \"Indaiatuba\", \"Itapetininga\",\r",
											"  \"Itapeva\", \"Botucatu\", \"Avar√©\", \"Ourinhos\", \"Presidente Prudente\",\r",
											"  \"Bauru\", \"Araraquara\", \"Catanduva\", \"Votuporanga\", \"Fernand√≥polis\",\r",
											"  \"S√£o Jos√© do Rio Preto\", \"Barretos\", \"Batatais\", \"Cravinhos\", \"Sert√£ozinho\",\r",
											"  \"Pindamonhangaba\", \"Bragan√ßa Paulista\", \"Atibaia\", \"Amparo\", \"Limeira\",\r",
											"  \"Americana\", \"Santa B√°rbara d'Oeste\", \"Nova Odessa\", \"Hortol√¢ndia\", \"Paul√≠nia\",\r",
											"  \"Sumar√©\", \"Valinhos\", \"Vinhedo\", \"Itatiba\", \"Jaguari√∫na\",\r",
											"  \"Pedreira\", \"Mogi Gua√ßu\", \"Mogi Mirim\", \"S√£o Jo√£o da Boa Vista\", \"Po√ßos de Caldas\",\r",
											"  \"Passos\", \"Lavras\", \"Varginha\", \"Itajub√°\", \"Pouso Alegre\",\r",
											"  \"Montes Claros\", \"Te√≥filo Otoni\", \"Ipatinga\", \"Coronel Fabriciano\", \"Tim√≥teo\",\r",
											"  \"Governador Valadares\", \"Uberaba\", \"Patos de Minas\", \"Arax√°\", \"Paracatu\",\r",
											"  \"Diamantina\", \"S√£o Jo√£o del-Rei\", \"Barbacena\", \"Juazeiro do Norte\", \"Crato\",\r",
											"  \"Barbalha\", \"Sobral\", \"Iguatu\", \"Quixad√°\", \"Maracana√∫\",\r",
											"  \"Caucaia\", \"Itapipoca\", \"Pacajus\", \"Horizonte\", \"Eus√©bio\",\r",
											"  \"Maranguape\", \"Canind√©\", \"Tiangu√°\", \"Camocim\", \"Acara√∫\",\r",
											"  \"Parna√≠ba\", \"Floriano\", \"Picos\", \"S√£o Raimundo Nonato\", \"Altos\",\r",
											"  \"Campo Maior\", \"Piripiri\", \"Pedro II\", \"Oeiras\", \"Corrente\",\r",
											"  \"Barreiras\", \"Ilh√©us\", \"Itabuna\", \"Jequi√©\", \"Vit√≥ria da Conquista\",\r",
											"  \"Teixeira de Freitas\", \"Porto Seguro\", \"Eun√°polis\", \"Alagoinhas\", \"Feira de Santana\",\r",
											"  \"Cama√ßari\", \"Lauro de Freitas\", \"Sim√µes Filho\", \"Santo Ant√¥nio de Jesus\", \"Valen√ßa\",\r",
											"  \"Jacobina\", \"Irec√™\", \"Senhor do Bonfim\", \"Paulo Afonso\", \"Juazeiro\",\r",
											"  \"Petrolina\", \"Garanhuns\", \"Caruaru\", \"Arcoverde\", \"Serra Talhada\",\r",
											"  \"Afogados da Ingazeira\", \"Salgueiro\", \"Ouricuri\", \"Cabrob√≥\", \"Floresta\",\r",
											"  \"Palmeira dos √çndios\", \"Arapiraca\", \"Delmiro Gouveia\", \"Penedo\", \"S√£o Miguel dos Campos\",\r",
											"  \"Coruripe\", \"Uni√£o dos Palmares\", \"Rio Largo\", \"Marechal Deodoro\", \"S√£o Jos√© da Laje\",\r",
											"  \"Itabaiana\", \"Lagarto\", \"Est√¢ncia\", \"Nossa Senhora do Socorro\", \"Propri√°\",\r",
											"  \"Tobias Barreto\", \"Boquim\", \"Sim√£o Dias\", \"Gl√≥ria\", \"Canind√© de S√£o Francisco\"];\r",
											"    const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\",\r",
											"  \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\",\r",
											"  \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"    const distritos = [\"S√£o Br√°s\", \"Centro\", \"Jardim Am√©rica\", \"Boa Vista\", \"Vila Nova\"];\r",
											"    const ruas = [\"Rua 3 de Maio\", \"Av. Brasil\", \"Rua das Flores\", \"Rua da Sa√∫de\", \"Rua do Com√©rcio\"];\r",
											" return {\r",
											"    country: \"Brasil\",\r",
											"    zipCode: `${Math.floor(60000000 + Math.random() * 999999)}`,\r",
											"    city: cidades[index % cidades.length],\r",
											"    state: estados[index % estados.length],\r",
											"    district: distritos[index % distritos.length],\r",
											"    street: ruas[index % ruas.length],\r",
											"    number: Math.floor(1000000000 + Math.random() * 9000000000),\r",
											"    complement: \"Hospital do Cora√ß√£o\"\r",
											"};\r",
											"\r",
											"}\r",
											"\r",
											"function gerarClientes(quantidade) {\r",
											"    let clientes = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let nome = gerarNome();\r",
											"        let email = gerarEmail(nome, i);\r",
											"        let telefone = gerarTelefone();\r",
											"        let cpf = gerarCPF();\r",
											"        let rg = gerarRG();\r",
											"        let endereco = gerarEndereco(i);\r",
											"\r",
											"        let cliente = {\r",
											"            fullName: nome,\r",
											"            birthDate: gerarDataNascimento(),\r",
											"            mail: email,\r",
											"            phone: telefone,\r",
											"            currentRole: \"ADMIN\",\r",
											"            documents: [\r",
											"                {\r",
											"                    rg: rg,\r",
											"                    cpf: cpf\r",
											"                }\r",
											"            ],\r",
											"            address: [endereco]\r",
											"        };\r",
											"\r",
											"        clientes.push(cliente);\r",
											"    }\r",
											"\r",
											"    return clientes;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 clientes\r",
											"let listaClientes = gerarClientes(200);\r",
											"pm.environment.set(\"massaClientes\", JSON.stringify(listaClientes));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o cliente atual\r",
											"let clienteAtual = listaClientes[pm.info.iteration];\r",
											"\r",
											"pm.environment.set(\"clienteAtual\", JSON.stringify(clienteAtual));\r",
											"pm.environment.set(\"fullName\", clienteAtual.fullName);\r",
											"pm.environment.set(\"birthDate\", clienteAtual.birthDate);\r",
											"pm.environment.set(\"mail\", clienteAtual.mail);\r",
											"pm.environment.set(\"phone\", clienteAtual.phone);\r",
											"pm.environment.set(\"cpf\", clienteAtual.documents[0].cpf);\r",
											"pm.environment.set(\"rg\", clienteAtual.documents[0].rg);\r",
											"pm.environment.set(\"zipCode\", clienteAtual.address[0].zipCode);\r",
											"pm.environment.set(\"city\", clienteAtual.address[0].city);\r",
											"pm.environment.set(\"state\", clienteAtual.address[0].state);\r",
											"pm.environment.set(\"district\", clienteAtual.address[0].district);\r",
											"pm.environment.set(\"street\", clienteAtual.address[0].street);\r",
											"pm.environment.set(\"number\", clienteAtual.address[0].number);\r",
											"pm.environment.set(\"complement\", clienteAtual.address[0].complement);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response does not contain error messages or unexpected content\", function () {\r",
											"    const responseBody = pm.response.text();\r",
											"    \r",
											"    pm.expect(responseBody).to.not.include(\"error\");\r",
											"    pm.expect(responseBody).to.not.include(\"not found\");\r",
											"    pm.expect(responseBody).to.not.include(\"unexpected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"birthDate\": \"{{birthDate}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"{{rg}}\",\r\n      \"cpf\": \"{{cpf}}\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n/* campo numero aceita apenas 10 numeros, se coloco 9 a mensagem e que deve conter somente numeros.",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}clien",
									"host": [
										"{{url}}clien"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "listClient",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Seleciona um id aleat√≥rio de clientes.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"/*cria variavel para -id client */ \r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    if (responseData.clients && responseData.clients.length > 0) {\r",
											"        var randomIndex = Math.floor(Math.random() * responseData.clients.length);\r",
											"        var randomClientId = responseData.clients[randomIndex]._id;\r",
											"        pm.globals.set(\"randomClientId\", randomClientId);\r",
											"        console.log(\"ID aleat√≥rio selecionado:\", randomClientId);\r",
											"    } else {\r",
											"        console.warn(\"Nenhum cliente dispon√≠vel para sele√ß√£o.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se a resposta cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response contains required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.clients).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.clients.forEach(client => {\r",
											"        pm.expect(client).to.include.all.keys('_id', 'fullName', 'birthDate', 'mail', 'phone', 'currentRole');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se birthDate est√° no formato DDMMYYYY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"BirthDate est√° no formato DDMMYYYY\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.have.property('clients').that.is.an('array').with.length.greaterThan(0);\r",
											"    const birthDateRegex = /^\\d{2}\\d{2}\\d{4}$/; // Exemplo: 20101979\r",
											"\r",
											"    responseData.clients.forEach(client => {\r",
											"        pm.expect(client).to.have.property('birthDate').that.is.a('string');\r",
											"        pm.expect(client.birthDate).to.match(birthDateRegex, \"Formato de birthDate inv√°lido\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o campo mail est√° em formato de e-mail v√°lido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mail is in a valid email format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.clients.forEach(client => {\r",
											"        pm.expect(client.mail).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Mail format is invalid\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifica se o tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verificar que a resposta n√£o cont√©m o campo password (prote√ß√£o de dados)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response does not expose sensitive fields like 'password'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.clients.forEach(client => {\r",
											"        pm.expect(client).to.not.have.property('password');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verificar que mail n√£o aceita formato inv√°lido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Mail is rejected if format is invalid\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.clients.forEach(client => {\r",
											"        pm.expect(client.mail).to.not.match(/^[^@]+$/, \"Mail should not be accepted in invalid format\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verificar que birthDate n√£o est√° em formato futuro",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"BirthDate is not in the future\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const today = new Date();\r",
											"\r",
											"    responseData.clients.forEach(client => {\r",
											"        const birthDate = client.birthDate;\r",
											"        const parsedDate = new Date(birthDate.slice(4, 8), birthDate.slice(2, 4) - 1, birthDate.slice(0, 2)); // DDMMYYYY\r",
											"\r",
											"        pm.expect(parsedDate.getTime()).to.be.below(today.getTime(), \"BirthDate should not be in the future\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verificar que phone n√£o est√° vazio ou com caracteres inv√°lidos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Phone number is not empty and contains only digits\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.clients.forEach(client => {\r",
											"        pm.expect(client.phone).to.match(/^\\d+$/, \"Phone should contain only digits\");\r",
											"        pm.expect(client.phone.length).to.be.above(7, \"Phone number is too short\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/",
									"host": [
										"{{url}}client"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "countClient",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/count",
									"host": [
										"{{url}}client"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/count",
									"host": [
										"{{url}}client"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta cont√©m o campo obrigat√≥rio count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response contains the required field 'count'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('count');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/count",
									"host": [
										"{{url}}client"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "count √© um n√∫mero inteiro n√£o negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Count √© um n√∫mero inteiro n√£o negativo\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.count).to.exist;\r",
											"    pm.expect(responseData.count).to.be.a('number').that.is.at.least(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/count",
									"host": [
										"{{url}}client"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tipo de conte√∫do da resposta √© application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O tipo de conte√∫do da resposta √© application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/count",
									"host": [
										"{{url}}client"
									],
									"path": [
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica status 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains an error field that is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response schema is valid\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/coun",
									"host": [
										"{{url}}client"
									],
									"path": [
										"coun"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se O cabe√ßalho Content-Type est√° correto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/coun",
									"host": [
										"{{url}}client"
									],
									"path": [
										"coun"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se A resposta cont√©m um campo error com uma string n√£o vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response contains an error field that is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/coun",
									"host": [
										"{{url}}client"
									],
									"path": [
										"coun"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se O tempo de resposta √© inferior a 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/coun",
									"host": [
										"{{url}}client"
									],
									"path": [
										"coun"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se O esquema da resposta est√° v√°lido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response schema is valid\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/coun",
									"host": [
										"{{url}}client"
									],
									"path": [
										"coun"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "showClientID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientId}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "tempo de resposta",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response contains required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.client).to.exist;\r",
											"\r",
											"    const requiredFields = ['_id', 'fullName', 'birthDate', 'mail', 'phone', 'currentRole', 'documents', 'address', 'audit'];\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData.client).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar a estrutura do array de documento",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the documents array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('client').that.is.an('object');\r",
											"    pm.expect(responseData.client).to.have.property('documents').that.is.an('array').with.length.of.at.least(1);\r",
											"    \r",
											"    responseData.client.documents.forEach(function(document) {\r",
											"        pm.expect(document).to.have.all.keys('cpf', 'rg', '_id');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O array de endere√ßos cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Address array contains required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.client).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.client.address).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.client.address.forEach(function(address) {\r",
											"        pm.expect(address).to.have.all.keys('country', 'zipCode', 'city', 'state', 'district', 'street', 'number', 'complement', '_id');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "status 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}clien{{randomClientID}}",
									"host": [
										"{{url}}clien{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha verifica se  Content-Type inclui 'text/html",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type inclui 'text/html'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}clien{{randomClientID}}",
									"host": [
										"{{url}}clien{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Corpo da resposta n√£o cont√©m dados JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Corpo da resposta n√£o cont√©m dados JSON\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.not.include('{');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}clien{{randomClientID}}",
									"host": [
										"{{url}}clien{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se Resposta segue o esquema de erro esperado (se for JSON)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ids = JSON.parse(pm.environment.get(\"clientIdList\") || \"[]\");\r",
											"let index = parseInt(pm.environment.get(\"clientIndex\") || \"0\");\r",
											"\r",
											"if (index < ids.length) {\r",
											"    const selectedId = ids[index];\r",
											"    pm.environment.set(\"clientId\", selectedId);\r",
											"    pm.environment.set(\"clientIndex\", index + 1);\r",
											"    console.log(\"Usando clientId:\", selectedId);\r",
											"} else {\r",
											"    console.warn(\"Todos os clientId j√° foram usados ou a lista est√° vazia.\");\r",
											"}\r",
											"console.log(\"clientIdList:\", pm.environment.get(\"clientIdList\"));\r",
											"console.log(\"clientId selecionado:\", pm.environment.get(\"clientId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Resposta segue o esquema de erro esperado (se for JSON)\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"    \r",
											"    if (contentType && contentType.includes('application/json')) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(pm.response.code).to.equal(404);\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData).to.have.all.keys('error', 'message');\r",
											"        pm.expect(responseData.error).to.be.a('string');\r",
											"        pm.expect(responseData.message).to.be.a('string');\r",
											"    } else {\r",
											"        console.log(\"Resposta n√£o est√° em JSON. Esquema de erro n√£o aplic√°vel.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}clien{{randomClientID}}",
									"host": [
										"{{url}}clien{{randomClientID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upDateClientID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O c√≥digo de status da resposta √© 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/{{randomClientId}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tempo de resposta √© menor que 200ms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O tempo de resposta √© menor que 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A resposta cont√©m os campos obrigat√≥rios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A resposta cont√©m os campos obrigat√≥rios\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys(\r",
											"        '_id', 'fullName', 'birthDate', 'mail', 'phone',\r",
											"        'currentRole', 'documents', 'address', 'audit', '__v'\r",
											"    );\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar a estrutura do array documents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar a estrutura do array de documentos\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('documents').that.is.an('array').and.is.not.empty;\r",
											"    \r",
											"    responseData.documents.forEach(function(documento) {\r",
											"        pm.expect(documento).to.have.all.keys('cpf', 'rg', '_id');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar a estrutura do array address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar a estrutura do array de endere√ßos\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.address).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.address.forEach(function(endereco) {\r",
											"        pm.expect(endereco).to.have.all.keys(\r",
											"            'country', 'zipCode', 'city', 'state', 'district',\r",
											"            'street', 'number', 'complement', '_id'\r",
											"        );\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "status 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client{{randomClientID}}",
									"host": [
										"{{url}}client{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica tepo de reposta",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client{{randomClientID}}",
									"host": [
										"{{url}}client{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica Content-Type inclui 'text/html'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response content type is text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"text/html\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client{{randomClientID}}",
									"host": [
										"{{url}}client{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Verifica se o corpo da resposta HTML n√£o cont√©m dados sens√≠veis",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is HTML and does not contain sensitive data\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.include(\"<!DOCTYPE html>\");\r",
											"    pm.expect(body).to.not.include(\"password\");\r",
											"    pm.expect(body).to.not.include(\"token\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client{{randomClientID}}",
									"host": [
										"{{url}}client{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e Valida o esquema de erro apenas se a resposta for JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function limparTexto(texto) {\r",
											"    return texto\r",
											"        .normalize(\"NFD\")\r",
											"        .replace(/[\\u0300-\\u036f]/g, \"\")\r",
											"        .replace(/\\s+/g, \".\")\r",
											"        .toLowerCase();\r",
											"}\r",
											"\r",
											"function gerarEmail(index) {\r",
											"    const nomes = [\"joice\", \"carlos\", \"marina\", \"felipe\", \"amanda\", \"rafael\", \"beatriz\", \"lucas\", \"patricia\", \"thiago\"];\r",
											"    const dominios = [\"tesaet.com\", \"teste.com\", \"carol.org\"];\r",
											"    let nome = nomes[index % nomes.length];\r",
											"    return `${nome}.${index}@${dominios[index % dominios.length]}`;\r",
											"}\r",
											"\r",
											"function gerarTelefone() {\r",
											"    return `55${Math.floor(10000000000 + Math.random() * 89999999999)}`;\r",
											"}\r",
											"\r",
											"function gerarContatos(quantidade) {\r",
											"    let contatos = [];\r",
											"\r",
											"    for (let i = 0; i < quantidade; i++) {\r",
											"        let contato = {\r",
											"            mail: gerarEmail(i),\r",
											"            phone: gerarTelefone()\r",
											"        };\r",
											"        contatos.push(contato);\r",
											"    }\r",
											"\r",
											"    return contatos;\r",
											"}\r",
											"\r",
											"// üîÅ Gera 200 contatos\r",
											"let listaContatos = gerarContatos(200);\r",
											"pm.environment.set(\"massaContatos\", JSON.stringify(listaContatos));\r",
											"\r",
											"// üîÑ Define vari√°veis individuais para o contato atual\r",
											"let contatoAtual = listaContatos[pm.info.iteration];\r",
											"pm.environment.set(\"mail\", contatoAtual.mail);\r",
											"pm.environment.set(\"phone\", contatoAtual.phone);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response conforms to expected error schema if JSON\", function () {\r",
											"    const contentType = pm.response.headers.get('Content-Type');\r",
											"\r",
											"    if (contentType && contentType.includes(\"application/json\")) {\r",
											"        const responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData).to.have.property('error');\r",
											"        pm.expect(responseData.error).to.have.property('code').that.is.a('string');\r",
											"        pm.expect(responseData.error).to.have.property('message').that.is.a('string');\r",
											"    } else {\r",
											"        console.log(\"Resposta n√£o est√° em JSON. Esquema de erro n√£o aplic√°vel.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Teste nomee\",\r\n  \"birthDate\": \"24082023\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"currentRole\": \"ADMIN\",\r\n  \"documents\": [\r\n    {\r\n      \"rg\": \"6306797\",\r\n      \"cpf\": \"00070880000\"\r\n    }\r\n  ],\r\n  \"address\": [\r\n    {\r\n      \"country\": \"Brasil\",\r\n      \"zipCode\": \"61025639\",\r\n      \"city\": \"Bel√©m\",\r\n      \"state\": \"PA\",\r\n      \"district\": \"S√£o Br√°s\",\r\n      \"street\": \"Rua 3 de Maio\",\r\n      \"number\": \"27\",\r\n      \"complement\": \"Hospital do Cora√ß√£o\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}client{{randomClientID}}",
									"host": [
										"{{url}}client{{randomClientID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upDateClientID",
					"item": [
						{
							"name": "status 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientId}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "upDateClientID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required field 'msg'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "\"A propriedade msg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"The msg property should be a string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.msg).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O tipo de conte√∫do da resposta √© application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "status 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O c√≥digo de status da resposta √© 500\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica se a A resposta cont√©m o campo obrigat√≥rio error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A resposta cont√©m o campo obrigat√≥rio 'error'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{randomClientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "falha e verifica O tipo de conte√∫do da resposta √© application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O tipo de conte√∫do da resposta √© application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}client/{randomClientID}}",
									"host": [
										"{{url}}client"
									],
									"path": [
										"{randomClientID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{tokenUsers}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "key",
				"value": "token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}